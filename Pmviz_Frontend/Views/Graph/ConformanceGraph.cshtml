@{
    ViewData["Title"] = "Compare Processes";
}
<link href="@Url.Content("~/css/Graphs.css")" rel="stylesheet" />
<link href="@Url.Content("~/css/Loading.css")" rel="stylesheet" />
<style>
    body {
        position: relative !important;
        overflow: hidden !important;
    }
    
</style>
<div id="loader" style="display: none;"></div>
<div id="fullPage">
    <div class="row">
        <div class="col-sm-5">
            <div id="divSelectAlgorithm" class="card border-0 card-conformance">
                <div class="card-body">
                    <h5>Escolha o algoritmo e a opção de tempo estimado</h5>
                    <div class="collapse pt-3 show">
                        <div class="col-sm-12">
                            <div class="row">
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="miner" id="alphaRadio" value="alpha-miner" onclick="handleMiner(this);" checked>
                                    <label class="form-check-label" for="alphaRadio">Alpha</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="miner" id="heuristicRadio" onclick="handleMiner(this);" value="heuristic-miner">
                                    <label class="form-check-label" for="heuristicRadio">Heuristíco</label>
                                </div>
                                <div class="form-inline" id="divTreshold">
                                    <div class="form-group">
                                        <label for="thresholdInput">Threshold</label>
                                        <input type="number" class="form-control mx-sm-2" id="thresholdInput" value="0.1" step=".1" min="0" max="1" style="height: 20px">
                                        <small id="thresholdHelp" class="text-muted">O threshold têm que estar entre 0 e 1</small>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="filter" id="estimatedEnd" checked>
                                    <label class="form-check-label" for="estimatedEnd">Fim estimado</label>
                                    <small id="estimatedEndHelp" class="text-muted">Ativar/Desativar o fim estimado das atividades</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card border-0 card-conformance">
                <div class="card-body">
                    <h4 id="processSelected" class="header-title mb-0">Escolha o processo de referência</h4>
                    <div class="collapse pt-3 show">
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <select id="inputProcesses" name="processes" class="selectpicker form-control" data-size="6">
                                        <option value="" disabled selected>Escolha o processo</option>
                                    </select>
                                </div>
                            </div>
                            <div id="divSelectCase">
                                <div class="col row">
                                    <div class="col">
                                        <div class="form-group">
                                            <button id="centerButton" class="btn btn-sm btn-secondary pull-right" disabled><i class="fas fa-project-diagram"></i>Centrar grafo</button>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-group">
                                            <button id="legendGraphButton" class="btn btn-sm btn-info pull-right" title="Graph Legend" data-toggle="popover" data-placement="bottom"><i class="fas fa-info"></i>  Informação do grafo</button>
                                        </div>
                                        <div id="popover_content_wrapper" style="display: none">
                                            <div>
                                                <div class="row">
                                                    <div class="col-sm-3">
                                                        <div class="rectangle green">Fresagem</div>
                                                    </div>
                                                    <div class="col">
                                                        <p class="text-dark align-middle" style="position: relative;top: 6px;">Tempo do processo conforme em relação ao modelo</p>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-3">
                                                        <div class="rectangle red">Fresagem</div>
                                                    </div>
                                                    <div class="col">
                                                        <p class="text-dark align-middle" style="position: relative;top: 6px;">Tempo do processo não conforme em relação ao modelo</p>
                                                    </div>
                                                </div><br />
                                                <div class="row">
                                                    <div class="col-sm-3 row">
                                                        <div class="green-rectangle-shape"></div>
                                                        <div class="green-triangle-shape"></div>
                                                    </div>
                                                    <div class="col">
                                                        <p class="text-dark align-middle" style="left: 25px;position: relative;">Tempo conforme entre as atividades</p>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-3 row">
                                                        <div class="red-rectangle-shape"></div>
                                                        <div class="red-triangle-shape"></div>
                                                    </div>
                                                    <div class="col">
                                                        <p class="text-dark align-middle" style="left: 25px;position: relative;">Tempo não conforme entre as atividades</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="divSelectFilter">
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="text-dark">Data Inicial</label>
                                        <div class="input-group input-group-sm">
                                            <input class="form-control" type="date" id="inputStartFilter" onkeydown="event.preventDefault()">
                                            <div class="input-group-append">
                                                <button class="btn btn-danger datepicker-btn" type="button" onclick="clearCalendar('inputStartFilter')"><i class="fas fa-times"></i></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="text-dark">Data Final</label>
                                        <div class="input-group input-group-sm">
                                            <input class="form-control" type="date" id="inputEndFilter" onkeydown="event.preventDefault()">
                                            <div class="input-group-append">
                                                <button class="btn btn-danger datepicker-btn" type="button" onclick="clearCalendar('inputEndFilter')"><i class="fas fa-times"></i></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div id="colFilterMoulds" class="col">
                                    <div class="form-group">
                                        <label class="text-dark">Moldes</label>
                                        <select id="mouldsFilter" class="form-control form-control-sm" multiple title="No mold selected" data-size="4" data-dropup-auto="false" data-actions-box="true"></select>
                                    </div>
                                </div>
                                <div id="colFilterParts" class="col" style="display:none;">
                                    <div class="form-group">
                                        <label class="text-dark">Partes</label>
                                        <select id="partsFilter" class="form-control form-control-sm selectpicker" multiple title="No parts selected" data-size="4" data-actions-box="true"></select>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="form-group">
                                        <label class="text-dark">Atividades</label>
                                        <select id="activitiesFilter" class="form-control form-control-sm selectpicker" multiple title="No activity selected" data-size="4" data-dropup-auto="false" data-actions-box="true"></select>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div class="form-group">
                                        <label class="text-dark">Operadores</label>
                                        <select id="resourcesFilter" class="form-control form-control-sm selectpicker" multiple title="No operator selected" data-size="4" data-dropup-auto="false" data-actions-box="true"></select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="clearActivities">
                            <h5>Não há nenhum processo com eventos seleccionado</h5>
                        </div>
                    </div> 
                </div>
            </div>
            <div class="card border-0 card-conformance">
                <div id="modelCompare" class="card-body">
                    <h4 class="header-title mb-0">Escolha o modelo a comparar </h4>
                    <div class="collapse pt-3 show">
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="text-dark">Data Inicial</label>
                                    <div class="input-group input-group-sm">
                                        <input class="form-control" type="date" id="inputStartCase" onkeydown="event.preventDefault()">
                                        <div class="input-group-append">
                                            <button class="btn btn-danger datepicker-btn" type="button" onclick="clearCalendar('inputStartCase')"><i class="fas fa-times"></i></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label class="text-dark">Data Final</label>
                                    <div class="input-group input-group-sm">
                                        <input class="form-control" type="date" id="inputEndCase" onkeydown="event.preventDefault()">
                                        <div class="input-group-append">
                                            <button class="btn btn-danger datepicker-btn" type="button" onclick="clearCalendar('inputEndCase')"><i class="fas fa-times"></i></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div id="colCaseMoulds" class="col">
                                <div class="form-group">
                                    <label class="text-dark">Moldes</label>
                                    <select id="mouldsCase" class="form-control form-control-sm selectpicker" multiple title="No mold selected" data-size="4" data-actions-box="true"></select>
                                </div>
                            </div>
                            <div id="colCaseParts" class="col" style="display:none;">
                                <div class="form-group">
                                    <label class="text-dark">Partes</label>
                                    <select id="partsCase" class="form-control form-control-sm selectpicker" multiple title="No parts selected" data-size="4" data-actions-box="true"></select>
                                </div>
                            </div>
                            <div class="col">
                                <div class="form-group">
                                    <label class="text-dark">Atividades</label>
                                    <select id="activitiesCase" class="form-control form-control-sm selectpicker" multiple title="No activity selected" data-size="4" data-actions-box="true"></select>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    <label class="text-dark">Operadores</label>
                                    <select id="resourcesCase" class="form-control form-control-sm selectpicker" multiple title="No operator selected" data-size="4" data-actions-box="true"></select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-7 card-box" style="height: 88.5vh;">
            <div id="loaderCy" style="display: none;"></div>
            <div id="cy">
                <div id="tip">Seleccione um Processo e um Modelo a comparar</div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#legendGraphButton').popover({
            html: true,
            content: function () {
                return $('#popover_content_wrapper').html();
            }
        });
    });
    var divClearActivities = document.getElementById("clearActivities");
    var divmodelCompare = document.getElementById('modelCompare');

    var inputStartCase = document.getElementById("inputStartCase");
    var inputEndCase = document.getElementById("inputEndCase");
    var divTreshold = document.getElementById("divTreshold");
    var thresholdInput = document.getElementById("thresholdInput");
    var divLoader = document.getElementById("loader");
    var divFullPage = document.getElementById("fullPage");
    var divLoaderCy = document.getElementById("loaderCy");
    var divCy = document.getElementById("cy");
    var divSelectFilter = document.getElementById("divSelectFilter");
    var mouldsFilter = document.getElementById("mouldsFilter");
    var activitiesFilter = document.getElementById("activitiesFilter");
    var inputStartFilter = document.getElementById("inputStartFilter");
    var inputEndFilter = document.getElementById("inputEndFilter");
    var centerButton = document.getElementById("centerButton");
    var processes = JSON.parse(@Html.Raw(Json.Serialize(ViewData["processes"])));
    console.log(processes);
    var isUpdating = 0;
    var cy = null;
    var data = {
        baseData: {},
        caseData: {},
        activities: null,
        moulds: null,
        parts: null,
        resources: null,
    }
    var process = {
        idProcess: null,
        nameProcess: null,
        miner: 'alpha-miner',
        estimatedEnd: "true",
        threshold: "0.1",
        modelCompare: {
            startDate: "",
            endDate: "",
            activities: null,
            moulds: null,
            resources: null,
            parts: null,
        },
        filter: {
            activities: null,
            moulds: null,
            resources: null,
            parts: null,
            startDate: "",
            endDate: ""
        }
    };
    var processWithoutActivities = true;
    var radioCheckButtonsChange = false;
    var verifyChangesRunning = false;
    var auxProcess = {};
    var caseText = null;
    divTreshold.style.display = "none";
    divmodelCompare.style.display = "none";
    divSelectFilter.style.display = "none";

    if (processes.length != 0) {
        for (var i = 0; i < processes.length; i++) {
            var option = document.createElement("option");
            option.setAttribute("value", processes[i].id);
            option.text = processes[i].name;
            inputProcesses.appendChild(option);
        }
    }

    function changeInputDate(change) {
        inputStartDate.disabled = change;
        inputEndDate.disabled = change;
    }

    function handleMiner(myRadio) {
        process.miner = myRadio.value;
        radioCheckButtonsChange = true;
        if (myRadio.value == 'alpha-miner') {
            divTreshold.style.display = "none";
        } else {
            divTreshold.style.display = "block";
        }
        if (process.idProcess && !verifyChangesRunning) {
            verifyChanges();
        }

    }

    function resetGraph() {
        if (cy != null) {
            cy.unmount();

            var element = document.createElement("div");
            element.setAttribute("id", "tip");
            element.appendChild(document.createTextNode('Seleccione um Processo e um Modelo a comparar'));
            document.getElementById("cy").appendChild(element);
            return;
        }
        document.getElementById("tip").style.display = "block";
    }

    function clearCalendar(x) {
        $('#' + x).val('').datepicker('update');
    }

    $('#estimatedEnd').change(function () {
        if (this.checked) {
            process.estimatedEnd = "true";
        } else {
            process.estimatedEnd = "false";
        }
        radioCheckButtonsChange = true;
        if (process.idProcess && !verifyChangesRunning) {
            verifyChanges();
        }
    });

    (function ($) {
        $.fn.extend({
            donetyping: function (callback, timeout) {
                timeout = timeout || 1e3;
                var timeoutReference,
                    doneTyping = function (el) {
                        if (!timeoutReference) {
                            return;
                        }
                        timeoutReference = null;
                        callback.call(el);
                    };
                return this.each(function (i, el) {
                    var $el = $(el);
                    $el.is(':input') && $el.on('keyup keypress paste', function (e) {
                        if (e.type == 'keyup' && e.keyCode != 8) {
                            return;
                        }
                        if (timeoutReference) {
                            clearTimeout(timeoutReference);
                        }
                        timeoutReference = setTimeout(function () {
                            doneTyping(el);
                        }, timeout);
                    }).on('blur', function () {
                        doneTyping(el);
                    });
                });
            }
        });
    })(jQuery);

    $('#thresholdInput').donetyping(function () {
        if (process.idProcess && $(this).val() >= 0 && $(this).val() <= 1 && !verifyChangesRunning) {
            verifyChanges();
        }
    });

    $('#divSelectFilter input, #divSelectFilter select, #modelCompare input, #modelCompare select').change(function () {
        if (!verifyChangesRunning) {
            console.log('verifyChanges');
            verifyChanges();
            return;
        }
    });

    function verifyChanges() {
        verifyChangesRunning = true;
        if (JSON.stringify(process.filter.moulds) == JSON.stringify($('#mouldsFilter').val()) &&
            JSON.stringify(process.filter.activities) == JSON.stringify($('#activitiesFilter').val()) &&
            JSON.stringify(process.filter.resources) == JSON.stringify($('#resourcesFilter').val()) &&
            JSON.stringify(process.filter.parts) == JSON.stringify($('#partsFilter').val()) &&
            JSON.stringify(process.modelCompare.moulds) == JSON.stringify($('#mouldsCase').val()) &&
            JSON.stringify(process.modelCompare.activities) == JSON.stringify($('#activitiesCase').val()) &&
            JSON.stringify(process.modelCompare.resources) == JSON.stringify($('#resourcesCase').val()) &&
            JSON.stringify(process.modelCompare.parts) == JSON.stringify($('#partsCase').val()) &&
            process.filter.startDate == inputStartFilter.value && process.filter.endDate == inputEndFilter.value &&
            process.modelCompare.startDate == inputStartCase.value && process.modelCompare.endDate == inputEndCase.value &&
            process.threshold == thresholdInput.value && !radioCheckButtonsChange) {
            verifyChangesRunning = false;
            if (isUpdating == 0) {
                verifyData();
                return;
            }
            isUpdating = 2;
        } else {
            process.filter.moulds = $('#mouldsFilter').val();
            process.filter.activities = $('#activitiesFilter').val();
            process.filter.resources = $('#resourcesFilter').val();
            process.filter.parts = $('#partsFilter').val();
            process.filter.startDate = inputStartFilter.value;
            process.filter.endDate = inputEndFilter.value;
            ////////////////////////////////////////////////////////////////////////
            process.modelCompare.moulds = $('#mouldsCase').val();
            process.modelCompare.activities = $('#activitiesCase').val();
            process.modelCompare.resources = $('#resourcesCase').val();
            process.modelCompare.parts = $('#partsCase').val();
            process.modelCompare.startDate = inputStartCase.value;
            process.modelCompare.endDate = inputEndCase.value;
            process.threshold = thresholdInput.value;
            radioCheckButtonsChange = false;
            setTimeout(verifyChanges, 2000);
        }
    }

    function convertDate(field) {
        if (field) {
            let current_datetime = new Date(field);
            return current_datetime.getDate() + "-" + (current_datetime.getMonth() + 1) + "-" + current_datetime.getFullYear();
        }
        return null;
    }

    $("#inputProcesses").change(function () {
        process.idProcess = $(this).val();
        process.nameProcess = $('#inputProcesses option:selected').text();
        loading(divFullPage, divLoader);
        clearInputs();
        $.ajax({
            type: "POST",
            data: { process: process.idProcess },
            url: "/Graph/GetInformation",
            dataType: 'json',
            success: function (response) {
                if (response.success) {
                    $('#processSelected').empty();
                    $('#processSelected').text('Processo de referência: ' + process.nameProcess);
                    processWithoutActivities = false;
                    var information = JSON.parse(response.request);
                    data.activities = information.activities;
                    data.moulds = information.moulds;
                    data.resources = information.resources;
                    data.parts = information.parts;
                    process.modelCompare = {
                        startDate: "",
                        endDate: "",
                        activities: null,
                        moulds: null,
                        resources: null,
                        parts: null,
                    };
                    process.filter = {
                        activities: null,
                        moulds: null,
                        resources: null,
                        parts: null,
                        startDate: "",
                        endDate: ""
                    };
                    if (!auxProcess.idProcess || isUpdating == 0) {
                        auxProcess = JSON.parse(JSON.stringify(process));
                    }
                    insertCases(data.activities, data.moulds, data.resources, data.parts);
                    insertFilters(data.moulds, data.activities, data.resources, data.parts);

                    divClearActivities.style.display = 'none';
                    divSelectFilter.style.display = "block";
                    divmodelCompare.style.display = "block";

                    loading(divLoader, divFullPage);
                    if (isUpdating == 0) {
                        generateFullGraph();
                    }
                } else {
                    process.idProcess = '';
                    auxProcess.idProcess = null;
                    isUpdating = 0;
                    $('#processSelected').empty();
                    $('#processSelected').text('Escolha o processo de referência');
                    processWithoutActivities = true;
                    resetGraph();
                    divSelectFilter.style.display = "none";
                    divmodelCompare.style.display = "none";
                    divClearActivities.style.display = 'block';
                    loading(divLoaderCy, divCy);
                    loading(divLoader, divFullPage);
                }
            },
            error: function (response) {
                loading(divLoader, divFullPage);
                alert("Erro no pedido");  //
            }

        });
    });

    function verifyData() {
        if (auxProcess.idProcess != process.idProcess) {
            generateFullGraph();
            return;
        }

        if (JSON.stringify(auxProcess) != JSON.stringify(process)) {
            if (process.threshold < 0 || process.threshold > 1) {
                alert("O threshold têm que estar entre 0 e 1");
                return;
            }
            /*
            if (process.filter.startDate || process.filter.endDate) {
                if ((process.filter.startDate && !process.filter.endDate) || (!process.filter.startDate && process.filter.endDate)) {
                    alert("Only one date is inserted on the Process filter");
                    return;
                }
                if (new Date(inputStartCase.value) > new Date(inputEndCase.value)) {
                    alert('Dates on the Process filter are not entered correctly');
                    return;
                }
            }
            if (process.modelCompare.startDate || process.modelCompare.endDate) {
                if ((process.modelCompare.startDate && !process.modelCompare.endDate) || (!process.modelCompare.startDate && process.modelCompare.endDate)) {
                    alert("Only one date is inserted on the Modal");
                    return;
                }
                if (new Date(inputStartCase.value) > new Date(inputEndCase.value)) {
                    alert('Dates on the Modal are not entered correctly');
                    return;
                }
            }*/
            if (process.filter.startDate && process.filter.endDate) {
                if (new Date(inputStartFilter.value) > new Date(inputStartFilter.value)) {
                    alert('As datas no filtro do processo não estão inseridas corretamente');
                    return;
                }
            }
            if (process.modelCompare.startDate && process.modelCompare.endDate) {

                if (new Date(inputStartCase.value) > new Date(inputEndCase.value)) {
                    alert('As datas no modelo a comparar não estão inseridas corretamente');
                    return;
                }
            }
            if (JSON.stringify(auxProcess.modelCompare) != JSON.stringify(process.modelCompare) || auxProcess.miner != process.miner ||
                (process.miner == "heuristic-miner" && auxProcess.threshold != process.threshold) || auxProcess.estimatedEnd != process.estimatedEnd) {
                /*if (JSON.stringify(auxProcess.modelCompare) != JSON.stringify(process.modelCompare)) {
                    if (data.moulds) {
                        if (!process.modelCompare.moulds && !process.modelCompare.activities && !process.modelCompare.resources &&
                            !process.modelCompare.startDate && !process.modelCompare.endDate) {
                            alert('Nothing selected on Modal to compare');
                            return;
                        }
                    } else {
                        if (!process.modelCompare.parts && !process.modelCompare.activities && !process.modelCompare.resources &&
                            !process.modelCompare.startDate && !process.modelCompare.endDate) {
                            alert('Nothing selected on Modal to compare');
                            return;
                        }
                    }


                }
                if (process.modelCompare.moulds.length < 0 && !process.modelCompare.startDate && !process.modelCompare.endDate) {
                    alert('You have to select at least one mold or insert a data range');
                    return;
                }*/

                generateFullGraph();
            } else {
                /*if (data.moulds) {
                    if (!process.filter.moulds && !process.filter.activities && !process.filter.resources &&
                        !process.filter.startDate && !process.filter.endDate) {
                        alert('Nothing selected on Process filter to compare');
                        return;
                    }
                } else {
                    if (!process.modelCompare.parts && !process.filter.activities && !process.filter.resources &&
                        !process.filter.startDate && !process.filter.endDate) {
                        alert('Nothing selected on Process filter to compare');
                        return;
                    }
                }*/
                generateJustTheFilters();
            }
        }
    }

    function generateFullGraph() {
        isUpdating = 1;
        loading(divCy, divLoaderCy);
        centerButton.disabled = true;
        auxProcess = JSON.parse(JSON.stringify(process));
        $.ajax({
            type: "POST",
            data: {
                process: process.idProcess,
                miner: process.miner,
                moulds: JSON.stringify(process.modelCompare.moulds),
                parts: JSON.stringify(process.modelCompare.parts),
                activities: JSON.stringify(process.modelCompare.activities),
                resources: JSON.stringify(process.modelCompare.resources),
                startDate: convertDate(process.modelCompare.startDate),
                endDate: convertDate(process.modelCompare.endDate),
                threshold: process.threshold,
                estimatedEnd: process.estimatedEnd,
                mouldsFilter: JSON.stringify(process.filter.moulds),
                resourcesFilter: JSON.stringify(process.filter.resources),
                activitiesFilter: JSON.stringify(process.filter.activities),
                startDateFilter: convertDate(process.filter.startDate),
                endDateFilter: convertDate(process.filter.endDate)
            },
            url: "/Graph/GetFullGraph",
            dataType: 'json',
            success: function (response) {
                if (processWithoutActivities) {return;}
                if (response.success) {
                    data.baseData = response.request.baseData;
                    data.caseData = response.request.caseData;
                    if (auxProcess.idProcess != process.idProcess) {
                        isUpdating = 0;
                        if (!verifyChangesRunning) {
                            verifyChanges();
                        }
                    } else if (isUpdating == 2) {
                        isUpdating = 0;
                        verifyData();
                    } else {
                        loading(divLoaderCy, divCy);
                        renderCytoscapeElementConformance();
                    }
                } else {
                    resetGraph();
                    loading(divLoaderCy, divCy);
                    alert("Erro a gerar o grafo, por favor verifique a informação selecionada");
                }
            },
            error: function (response) {
                loading(divLoaderCy, divCy);
                alert("Erro no pedido");  //
            }

        });
    }
    function generateJustTheFilters() {

        auxProcess = JSON.parse(JSON.stringify(process));
        isUpdating = 1;
        loading(divCy, divLoaderCy);
        centerButton.disabled = true;
        $.ajax({
            type: "POST",
            data: {
                process: process.idProcess,
                moulds: JSON.stringify(process.filter.moulds),
                parts: JSON.stringify(process.filter.parts),
                resources: JSON.stringify(process.filter.resources),
                activities: JSON.stringify(process.filter.activities),
                startDate: convertDate(process.filter.startDate),
                endDate: convertDate(process.filter.endDate),
                estimatedEnd: process.estimatedEnd,
                nodes: JSON.stringify(data.baseData.nodes)
            },
            url: "/Graph/GetFilter",
            dataType: 'json',
            success: function (response) {
                if (processWithoutActivities) { return; }
                if (response.success) {
                    data.caseData = response.request;
                    if (auxProcess.idProcess != process.idProcess) {
                        isUpdating = 0;
                        if (!verifyChangesRunning) {
                            verifyChanges();
                        }
                    } else if (isUpdating == 2) {
                        isUpdating = 0;
                        verifyData();
                    } else {
                        loading(divLoaderCy, divCy);
                        renderCytoscapeElementConformance();
                    }
                } else {
                    resetGraph();
                    loading(divLoaderCy, divCy);
                    alert("Erro a gerar o grafo, por favor verifique a informação selecionada");
                }
            },
            error: function (response) {
                loading(divLoaderCy, divCy);
                alert("Erro no pedido");  //
            }
        });
    }
    /*
    $("#btnCompareGraph").click(function () {
        var moulds = Array.from(mouldsCase.selectedOptions).map(option => option.text);
        var activities = Array.from(activitiesCase.selectedOptions).map(option => option.text);
        var resources = Array.from(resourcesCase.selectedOptions).map(option => option.text);

        if (process.idProcess == '') {
            alert("Não há nenhum processo selecionado");
        } else if (!inputStartCase.value && !inputEndCase.value && moulds < 1 && activities < 1 && resources < 1) {
            alert("Não há nada selecionado");
        }else {

            if ((inputStartCase.value && !inputEndCase.value) || (!inputStartCase.value && inputEndCase.value)) {
                alert("Só uma data é que está inserida");
                return;
            } else {
                if (inputStartCase.value || inputEndCase.value) {
                    if (new Date(inputStartCase.value) > new Date(inputEndCase.value)) {
                        alert('As datas não estão inseridas corretamente ');
                        return;
                    }
                    process.modelCompare.startDate = convertDate(inputStartCase.value);
                    process.modelCompare.endDate = convertDate(inputEndCase.value);
                }
                loading(divPage, divLoader);

                if (moulds.length > 0) {
                    process.modelCompare.moulds = moulds;
                }
                if (activities.length > 0) {
                    process.modelCompare.activities = activities;
                }
                if (resources.length > 0) {
                    process.modelCompare.resources = resources;
                }

                if ($('#estimatedEnd').is(':checked')) {
                    process.estimatedEnd = "true";
                } else {
                    process.estimatedEnd = "false";
                }

                process.threshold = thresholdInput.value;
            }


            loading(divPage, divLoader);
            $.ajax({
                type: "POST",
                data: {
                    process: process.idProcess,
                    miner: process.miner,
                    moulds: JSON.stringify(process.modelCompare.moulds),
                    activities: JSON.stringify(process.modelCompare.activities),
                    resources: JSON.stringify(process.modelCompare.resources),
                    startDate: process.modelCompare.startDate,
                    endDate: process.modelCompare.endDate,
                    threshold: process.threshold,
                    estimatedEnd: process.estimatedEnd
                },
                url: "/Graph/ConformanceGraph",
                dataType: 'json',
                success: function (response) {
                    if (response.success) {
                        data.baseData = response.request.baseData;
                        data.caseData = response.request.caseData;


                        insertFilters(data.moulds, data.activities, data.resources);
                        changeCards();
                        loading(divSelectCase, divSelectFilter);
                        loading(divLoader, divPage);

                        renderCytoscapeElementConformance();
                    } else {
                        loading(divLoader, divPage);
                        console.log(response);
                    }
                },
                error: function (response) {
                    loading(divLoader, divPage);
                    alert(response);  //
                }

            });

            //window.location = 'Url.Action("ConformanceGraph", "Graph")?processes=' + JSON.stringify(selectedInput) + '&miner=' + miner; FALTA O ARROBA
        }

    });

    $("#btnFilterGraph").click(function () {
        if (process.compare == "data") {
            if (!$("#mouldsFilter option:selected").length && !$("#activitiesFilter option:selected").length && !$("#resourcesFilter option:selected").length && inputStartFilter.value == inputStartDate.value && inputEndFilter.value == inputEndDate.value) {
                alert('Não há nada selecionado');
                return;
            }
        }

        if (!$("#mouldsFilter option:selected").length && !$("#activitiesFilter option:selected").length && !$("#resourcesFilter option:selected").length && !inputStartFilter.value && !inputEndFilter.value) {
            alert('Não há nada selecionado');
            return;
        }else if ((inputStartFilter.value && !inputEndFilter.value) || (!inputStartFilter.value && inputEndFilter.value)) {
                alert("Só uma data é que está inserida");
                return;
        }else {
            if (inputStartFilter.value || inputEndFilter.value) {
                if (new Date(inputStartFilter.value) > new Date(inputEndFilter.value)) {
                    alert('As datas não estão inseridas corretamente ');
                    return;
                }
                var startDate = convertDate(inputStartFilter.value);
                var endDate = convertDate(inputEndFilter.value);
            }
            loading(divPage, divLoader);
            var moulds = Array.from(mouldsFilter.selectedOptions).map(option => option.value);
            if (moulds.length > 0) {
                moulds = JSON.stringify(moulds);
            }
            var activities = Array.from(activitiesFilter.selectedOptions).map(option => option.text);
            if (activities.length > 0) {
                activities = JSON.stringify(activities);
            }
            var resources = Array.from(resourcesFilter.selectedOptions).map(option => option.value);
            if (resources.length > 0) {
                resources = JSON.stringify(resources);
            }
        }
        $.ajax({
            type: "POST",
            data: {
                process: process.idProcess,
                moulds: moulds,
                resources: resources,
                activities: activities,
                startDate: startDate,
                endDate: endDate,
                estimatedEnd: process.estimatedEnd,
                nodes: JSON.stringify(data.baseData.nodes)
            },
            url: "/Graph/GetFilter",
            dataType: 'json',
            success: function (response) {
                if (response.success) {
                    data.caseData = response.request;
                    loading(divLoader, divPage);

                    renderCytoscapeElementConformance();
                } else {
                    loading(divLoader, divPage);
                    console.log(response);
                }
            },
            error: function (response) {
                loading(divLoader, divPage);
                alert(response);  //
            }
        });
    });
    */
    function loading(x, y) {
        if (x.style.display != "none" || y.style.display != "block") {
            x.style.display = "none";
            y.style.display = "block";
        }
    }

    function clearInputs() {
        $('#mouldsFilter').selectpicker('deselectAll').empty();
        $('#activitiesFilter').selectpicker('deselectAll').empty();
        $('#resourcesFilter').selectpicker('deselectAll').empty();
        $('#partsFilter').selectpicker('deselectAll').empty();
        $('#mouldsCase').selectpicker('deselectAll').empty();
        $('#activitiesCase').selectpicker('deselectAll').empty();
        $('#resourcesCase').selectpicker('deselectAll').empty();
        $('#partsCase').selectpicker('deselectAll').empty();
        $('#inputStartFilter').val('');
        $('#inputEndFilter').val('');
        $('#inputStartCase').val('');
        $('#inputEndCase').val('');
    }
    function insertFilters(moulds, activities, resources, parts) {
        if (moulds != null && moulds.length != 0) {
            for (var i = 0; i < moulds.length; i++) {
                var option = document.createElement("option");
                option.setAttribute("value", moulds[i]);
                option.text = moulds[i];
                mouldsFilter.appendChild(option);
            }
            $("#colFilterParts").css("display", "none");
            $("#colFilterMoulds").css("display", "block");
            $('#mouldsFilter').selectpicker('refresh');
        }

        if (parts != null && parts.length != 0) {
            for (var i = 0; i < parts.length; i++) {
                var option = document.createElement("option");
                option.setAttribute("value", parts[i]);
                option.text = parts[i];
                partsFilter.appendChild(option);
            }
            $("#colFilterMoulds").css("display", "none");
            $("#colFilterParts").css("display", "block");
            $('#partsFilter').selectpicker('refresh');
        }

        if (activities != null || activities.length != 0) {
            for (var i = 0; i < activities.length; i++) {
                var option = document.createElement("option");
                option.setAttribute("value", activities[i]);
                option.text = activities[i];
                activitiesFilter.appendChild(option);
            }
            $('#activitiesFilter').selectpicker('refresh');
        }

        if (resources != null || resources.length != 0) {
            for (var i = 0; i < resources.length; i++) {
                var option = document.createElement("option");
                option.setAttribute("value", resources[i]);
                option.text = resources[i];
                resourcesFilter.appendChild(option);
            }
            $('#resourcesFilter').selectpicker('refresh');
        }
    }

    function insertCases(activities, moulds, resources, parts) {
        if (moulds != null && moulds.length != 0) {
            for (var i = 0; i < moulds.length; i++) {
                var option = document.createElement("option");
                option.setAttribute("value", moulds[i]);
                option.text = moulds[i];
                $('#mouldsCase').append(option);
            }
            $("#colCaseParts").css("display", "none");
            $("#colCaseMoulds").css("display", "block");
            $('#mouldsCase').selectpicker('refresh');
        }

        if (parts != null && parts.length != 0) {
            for (var i = 0; i < parts.length; i++) {
                var option = document.createElement("option");
                option.setAttribute("value", parts[i]);
                option.text = parts[i];
                partsCase.appendChild(option);
            }
            $("#colCaseMoulds").css("display", "none");
            $("#colCaseParts").css("display", "block");
            $('#partsCase').selectpicker('refresh');
        }

        if (activities != null || activities.length != 0) {
            for (var i = 0; i < activities.length; i++) {
                var option = document.createElement("option");
                option.setAttribute("value", activities[i]);
                option.text = activities[i];
                $('#activitiesCase').append(option);
            }
            $('#activitiesCase').selectpicker('refresh');
        }

        if (resources != null || resources.length != 0) {
            for (var i = 0; i < resources.length; i++) {
                var option = document.createElement("option");
                option.setAttribute("value", resources[i]);
                option.text = resources[i];
                $('#resourcesCase').append(option);
            }
            $('#resourcesCase').selectpicker('refresh');
        }
    }
    function changeCards() {
        if (process.miner == 'alpha-miner') {
            $("#infoMiner").html("Alpha miner");
        } else {
            $("#infoMiner").html("Heuristic miner | Treshold " + process.threshold);
        }
        $("#infoProcess").html(process.nameProcess);
        caseText = "";
        console.log(process);
        if (process.modelCompare.startDate && process.modelCompare.endDate) {
            caseText += "<strong>Data:</strong> " + process.modelCompare.startDate + " - " + process.modelCompare.endDate + "<br/>";
        }

        if (process.modelCompare.activities) {
            caseText += "<strong>Actividades:</strong> " + process.modelCompare.activities.toString() + "<br/>";
        }
        if (process.modelCompare.moulds) {
            caseText += "<strong>Moldes:</strong> " + process.modelCompare.moulds.toString() + "<br/>";
        }
        if (process.modelCompare.resources) {
            caseText += "<strong>Operadores:</strong> " + process.modelCompare.resources.toString() + "<br/>";
        }
        //caseText += "<strong>Tempo estimado:</strong> " + process.estimatedEnd;


        $("#infoCase").html(caseText);

    }

    $("#refreshButton").click(function () {
        loading(divPage, divLoader);
        window.location.reload(true);
    });

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    function renderCytoscapeElementConformance() {
        centerButton.disabled = false;
        isUpdating = 0;
        var element = document.getElementById("tip");
        if (typeof (element) != 'undefined' && element != null) {
            element.style.display = "none";
        }

        cy = cytoscape(
            {
                wheelSensitivity: 0.5,
                minZoom: 0.1,
                maxZoom: 1,
                container: document.getElementById('cy'),
                style: [
                    //Nodes styles
                    {
                        //white
                        selector: 'node[type=0]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FFFFFF",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 4,
                            "border-color": "#484848",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "text-wrap": "wrap",
                            "text-max-width": "1000px",
                            "color": "#222222"
                        }
                    },
                    {
                        //green with green text
                        selector: 'node[type=1]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FFFFFF",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 4,
                            "border-color": "#00b33c",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "text-wrap": "wrap",
                            "text-max-width": "1000px",
                            "color": "#00b33c",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.15px"
                        }
                    },
                    {
                        //red with green text
                        selector: 'node[type=2]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FFFFFF",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 4,
                            "border-color": "#ff0000",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "color": "#00b33c"
                        }
                    },
                    {
                        //green with red text
                        selector: 'node[type=3]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FFFFFF",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 4,
                            "border-color": "#00b33c",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "text-wrap": "wrap",
                            "text-max-width": "1000px",
                            "color": "#ff0000"
                        }
                    },
                    {
                        //red with red text
                        selector: 'node[type=4]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FFFFFF",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 4,
                            "border-color": "#ff0000",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "text-wrap": "wrap",
                            "text-max-width": "1000px",
                            "color": "#ff0000"
                        }
                    },
                    {
                        //process start node
                        selector: 'node[type=20]',
                        style: {
                            "shape": 'ellipse',
                            "background-color": "#3f3f3f",
                            "border-width": 4,
                            "border-color": "#131313",
                            'width': '50',
                            "height": "50",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "text-wrap": "wrap",
                            "text-max-width": "1000px",
                            "color": "#FF2222"
                        }
                    },

                    //Edges styles
                    {
                        //grey
                        selector: 'edge[type=0]',
                        style: {
                            'width': 5,
                            'curve-style': 'bezier',
                            "line-color": "#989898",
                            'target-arrow-color': '#989898',
                            "font-size": "32px",
                            "color": "#222222",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.3px"
                        }
                    },
                    {
                        //green with green text
                        selector: 'edge[type=1]',
                        style: {
                            'width': 5,
                            'curve-style': 'bezier',
                            "line-color": "#00b33c",
                            'target-arrow-color': '#00b33c',
                            "label": "data(label)",
                            "font-size": "32px",
                            "color": "#00b33c",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.3px",
                            "text-rotation": "0deg",
                            "text-margin-y": "-20px"
                        }
                    },
                    {
                        //red with green text
                        selector: 'edge[type=2]',
                        style: {
                            'width': 5,
                            'curve-style': 'bezier',
                            "line-color": "#ff0000",
                            'target-arrow-color': '#ff0000',
                            "content": "data(label)",
                            "font-size": "32px",
                            "color": "#00b33c",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.3px",
                            "text-rotation": "0deg"
                        }
                    },
                    {
                        //red with red text
                        selector: 'edge[type=4]',
                        style: {
                            'width': 5,
                            'curve-style': 'bezier',
                            "line-color": "#ff0000",
                            'target-arrow-color': '#ff0000',
                            "content": "data(label)",
                            "font-size": "32px",
                            "color": "#ff0000",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.3px",
                            "text-rotation": "0deg"
                        }
                    },
                    {
                        //green with red text
                        selector: 'edge[type=5]',
                        style: {
                            'width': 5,
                            'curve-style': 'bezier',
                            "line-color": "#00b33c",
                            'target-arrow-color': '#00b33c',
                            "content": "data(label)",
                            "font-size": "32px",
                            "color": "#ff0000",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.3px",
                            "text-rotation": "0deg"
                        }
                    },

                    {
                        //green with green text
                        selector: 'edge[type=6]',
                        style: {
                            'width': 5,
                            'curve-style': 'bezier',
                            "line-color": "#00b33c",
                            'target-arrow-color': '#00b33c',
                            "label": "data(label)",
                            "font-size": "32px",
                            "color": "#00b33c",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.3px",
                            "text-margin-y": "20px"
                        }
                    },


                    //temporary type to flag node as having non conform time, and to later be changed to type 5 if it is associated to the case (if not stays grey)
                    {
                        selector: 'edge[type=10]',
                        style: {
                            'width': 5,
                            'curve-style': 'bezier',
                            "line-color": "#989898",
                            'target-arrow-color': '#989898',
                            "font-size": "32px",
                            "color": "#222222",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.3px",
                            "text-rotation": "0deg"
                        }
                    },
                    {
                        //process start edge
                        selector: 'edge[type=20]',
                        style: {
                            'width': 8,
                            'curve-style': 'bezier',
                            'line-color': "#232323",
                            'target-arrow-color': '#232323',
                            "font-size": "32px",
                            "color": "#222222",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.3px"
                        }
                    },
                ],
            });

        //Nodes\\
        for (let i = 0; i < data.baseData.nodes.length; i++) {
            //determinar cor do nó
            let typeValue = 0;

            //verificar se faz parte da Path do case escolhido -> verde
            for (let k = 0; k < data.caseData.nodes.length; k++) {
                if (data.caseData.nodes[k].node === i) {
                    typeValue = 1;
                }
            }

            //verificar se tempo execução é não conforme -> texto vermelho
            //procurar a ocorrência do nó em questão com maior duração (pior caso)
            let maxDuration = {};
            maxDuration.days = 0;
            maxDuration.hours = 0;
            maxDuration.minutes = 0;
            maxDuration.seconds = 0;

            for (let k = 0; k < data.caseData.nodes.length; k++) {
                if (data.caseData.nodes[k].node === i && convertToSeconds(data.caseData.nodes[k].duration) > convertToSeconds(maxDuration)) {
                    maxDuration = data.caseData.nodes[k].duration;
                }
            }

            if (convertToSeconds(maxDuration) > convertToSeconds(data.baseData.taskDurations[i].duration)) {
                typeValue = 3;
            }

            let prevLabel = "\n Model: " + durationToString(data.baseData.taskDurations[i].duration);

            let realLabel = "Process: " + durationToString(maxDuration);

            /*
            //format label acording to time value
            let prevLabel;
            if (data.baseData.taskDurations[i].duration.days !== 0) {
                prevLabel = "\n Prev: " + data.baseData.taskDurations[i].duration.days + "D " + data.baseData.taskDurations[i].duration.hours + "H " + data.baseData.taskDurations[i].duration.minutes + "M " + data.baseData.taskDurations[i].duration.seconds + "S";
            } else if (data.baseData.taskDurations[i].duration.hours !== 0) {
                prevLabel = "\n Prev: " + data.baseData.taskDurations[i].duration.hours + "H " + data.baseData.taskDurations[i].duration.minutes + "M " + data.baseData.taskDurations[i].duration.seconds + "S";
            } else if (data.baseData.taskDurations[i].duration.minutes !== 0) {
                prevLabel = "\n Prev: " + data.baseData.taskDurations[i].duration.minutes + "M " + data.baseData.taskDurations[i].duration.seconds + "S";
            } else {
                prevLabel = "\n Prev: " + data.baseData.taskDurations[i].duration.seconds + "S";
            }

            let realLabel;
            if (data.baseData.taskDurations[i].duration.days !== 0) {
                realLabel = " / Real: " + maxDuration.days + "D " + maxDuration.hours + "H " + maxDuration.minutes + "M " + maxDuration.seconds + "S";
            } else if (data.baseData.taskDurations[i].duration.hours !== 0) {
                realLabel = " / Real: " + maxDuration.hours + "H " + maxDuration.minutes + "M " + maxDuration.seconds + "S";
            } else if (data.baseData.taskDurations[i].duration.minutes !== 0) {
                realLabel = " / Real: " + maxDuration.minutes + "M " + maxDuration.seconds + "S";
            } else {
                realLabel = " / Real: " + maxDuration.seconds + "S";
            }*/

            //se typevalue for 0 (não faz parte do caso em análise) formata texto de forma diferente
            if (typeValue === 0) {
                cy.add({
                    data: {
                        id: i,
                        label: data.baseData.nodes[i] + prevLabel,
                        type: typeValue
                    },
                }
                );
            } else {
                cy.add({
                    data: {
                        id: i,
                        label: data.baseData.nodes[i] + prevLabel + " / " +  realLabel,
                        type: typeValue
                    },
                }
                );
            }

        }

        //Edges\\
        for (let i = 0; i < data.baseData.relations.length; i++) {
            for (let j = 0; j < data.baseData.relations[i].to.length; j++) {

                //search for max duration for this relation, if it occurs more then once
                let maxDuration = {};
                maxDuration.days = 0;
                maxDuration.hours = 0;
                maxDuration.minutes = 0;
                maxDuration.seconds = 0;
                let edgeTypeValue = 0;
                for (let k = 0; k < data.caseData.relations.length; k++) {
                    if (data.caseData.relations[k].from === data.baseData.relations[i].from) {
                        for (let l = 0; l < data.caseData.relations[k].to.length; l++) {
                            if (data.caseData.relations[k].to[l].node === data.baseData.relations[i].to[j].node) {
                                if (convertToSeconds(data.caseData.relations[k].to[l].duration) > convertToSeconds(maxDuration)) {
                                    maxDuration = data.caseData.relations[k].to[l].duration;
                                }
                            }
                        }
                    }
                }

                //mark edge as having nonconform time
                if (convertToSeconds(maxDuration) > convertToSeconds(data.baseData.relations[i].to[j].duration)) {
                    edgeTypeValue = 10;
                }

                let prevLabel = "\n Model: " + durationToString(data.baseData.relations[i].to[j].duration);

                let realLabel = "Process: " + durationToString(maxDuration);
                /*
                let prevLabel = 0;
                if (data.baseData.relations[i].to[j].duration.days !== 0) {
                    prevLabel = "\n Prev: " + data.baseData.relations[i].to[j].duration.days + "D " + data.baseData.relations[i].to[j].duration.hours + "H " + data.baseData.relations[i].to[j].duration.minutes + "M ";
                } else if (data.baseData.relations[i].to[j].duration.hours !== 0) {
                    prevLabel = "\n Prev: " + data.baseData.relations[i].to[j].duration.hours + "H " + data.baseData.relations[i].to[j].duration.minutes + "M ";
                } else if (data.baseData.relations[i].to[j].duration.minutes !== 0) {
                    prevLabel = "\n Prev: " + data.baseData.relations[i].to[j].duration.minutes + "M " + data.baseData.relations[i].to[j].duration.seconds + "S";
                } else {
                    prevLabel = "\n Prev: " + data.baseData.relations[i].to[j].duration.seconds + "S";
                }

                let realLabel = 0;
                if (maxDuration.days !== 0) {
                    realLabel = "Real: " + maxDuration.days + "D " + maxDuration.hours + "H " + maxDuration.minutes + "M ";
                } else if (maxDuration.hours !== 0) {
                    realLabel = "Real: " + maxDuration.hours + "H " + maxDuration.minutes + "M ";
                } else if (maxDuration.minutes !== 0) {
                    realLabel = "Real: " + maxDuration.minutes + "M " + maxDuration.seconds + "S";
                } else {
                    realLabel = "Real: " + maxDuration.seconds + "S";
                }
                */
                cy.add({
                    data: {
                        id: 'edge' + data.baseData.relations[i].from + '-' + data.baseData.relations[i].to[j].node,
                        source: data.baseData.relations[i].from,
                        target: data.baseData.relations[i].to[j].node,
                        label: prevLabel + " / " + realLabel,
                        type: edgeTypeValue
                    }
                });
            }
        }

        let edges = [];
        //identify realtions which are part of the case(s) selected
        for (let i = 0; i < data.caseData.relations.length; i++) {
            for (let j = 0; j < data.caseData.relations[i].to.length; j++) {

                //check if already exists connection between the two nodes, in order to shift the text slightly so it doesn't overlap
                let control = 0;
                let edge = data.caseData.relations[i].from + "-" + data.caseData.relations[i].to[j].node;
                for (let k = 0; k < edges.length; k++) {
                    if (edges[k] === data.caseData.relations[i].to[j].node + "-" + data.caseData.relations[i].from) {
                        control = 1;
                    }
                }
                edges.push(edge);


                if (cy.getElementById("edge" + data.caseData.relations[i].from + "-" + data.caseData.relations[i].to[j].node).data('type') === 10) {
                    cy.getElementById("edge" + data.caseData.relations[i].from + "-" + data.caseData.relations[i].to[j].node).data('type', 5);
                } else {
                    if (control === 0) {
                        cy.getElementById("edge" + data.caseData.relations[i].from + "-" + data.caseData.relations[i].to[j].node).data('type', 1);
                    } else {
                        cy.getElementById("edge" + data.caseData.relations[i].from + "-" + data.caseData.relations[i].to[j].node).data('type', 6);
                    }

                }
            }
        }

        //change nodes which are outliers to red with green or red text
        for (let i = 0; i < data.baseData.deviations.nodes.length; i++) {
            if (cy.getElementById(data.baseData.deviations.nodes[i].toString()).data('type') === 3) {
                cy.getElementById(data.baseData.deviations.nodes[i].toString()).data('type', 4);
            } else if (cy.getElementById(data.baseData.deviations.nodes[i].toString()).data('type') === 1) {
                cy.getElementById(data.baseData.deviations.nodes[i].toString()).data('type', 2);
            } else {
                //cy.remove(cy.getElementById("edge" + data.baseData.deviations.nodes[i].from + "-" + data.baseData.deviations.nodes[i].to))
            }
        }

        //change edges which are outliers to red with green or red text
        for (let i = 0; i < data.baseData.deviations.relations.length; i++) {
            if (cy.getElementById("edge" + data.baseData.deviations.relations[i].from + "-" + data.baseData.deviations.relations[i].to).data('type') === 5) {
                cy.getElementById("edge" + data.baseData.deviations.relations[i].from + "-" + data.baseData.deviations.relations[i].to).data('type', 4);
            } else if (cy.getElementById("edge" + data.baseData.deviations.relations[i].from + "-" + data.baseData.deviations.relations[i].to).data('type') === 1) {
                cy.getElementById("edge" + data.baseData.deviations.relations[i].from + "-" + data.baseData.deviations.relations[i].to).data('type', 2);
            } else {
                //cy.remove(cy.getElementById("edge" + data.baseData.deviations.relations[i].from + "-" + data.baseData.deviations.relations[i].to))
            }
        }

        /*cy.getElementById("edge6-18_conformance").data('name', "8")*/

        //add process start and end nodes
        for (let i = 0; i < data.caseData.startEvents.length; i++) {
            cy.add({
                data: {
                    id: 'start-' + i,
                    type: 20
                },
            });

            cy.add({
                data: {
                    id: 'edge_start-' + i,
                    source: 'start-' + i,
                    target: data.caseData.startEvents[i].node,
                    type: 20
                }
            });
        }

        for (let i = 0; i < data.caseData.endEvents.length; i++) {
            cy.add({
                data: {
                    id: 'end-' + i,
                    type: 20
                },
            });
            cy.add({
                data: {
                    id: 'edge_end-' + i,
                    source: data.caseData.endEvents[i].node,
                    target: 'end-' + i,
                    type: 20
                }
            });
        }


        let customBreadthfirst = {
            name: 'breadthfirst',

            fit: true, // whether to fit the viewport to the graph
            directed: true, // whether the tree is directed downwards (or edges can point in any direction if false)
            padding: 10, // padding on fit
            circle: false, // put depths in concentric circles if true, put depths top down if false
            grid: false, // whether to create an even grid into which the DAG is placed (circle:false only)
            spacingFactor: 0.90, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
            boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
            avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
            nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
            roots: undefined, // the roots of the trees
            maximal: false, // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)
            animate: false, // whether to transition the node positions
            animationDuration: 500, // duration of animation in ms if enabled
            animationEasing: undefined, // easing of animation if enabled,
            animateFilter: function (node, i) {
                return true;
            }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
            ready: undefined, // callback on layoutready
            stop: undefined, // callback on layoutstop
            transform: function (node, position) {
                return position;
            } // transform a given node position. Useful for changing flow direction in discrete layouts
        };
        cy.layout(customBreadthfirst).run();
    }


    function convertToSeconds(duration) {
        return duration.days * 86400 + duration.hours * 3600 + duration.minutes * 60 + duration.seconds;
    }

    function durationToString(duration) {
        console.log(duration);
        if (duration.days == 0 && duration.hours == 0 && duration.minutes == 0 && duration.seconds == 0) {
            return "0S";
        }
        return ((duration.days !== 0) ? duration.days + "D " : "") +
            ((duration.hours !== 0) ? duration.hours + "H " : "") +
            ((duration.minutes !== 0) ? duration.minutes + "M " : "") +
            ((duration.seconds !== 0) ? duration.seconds + "S" : "");
    }

    $("#centerButton").click(function () {
        if (typeof cy !== "undefined") {
            cy.fit();
        }
    });

    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
</script>
<script src="@Url.Content("~/vendor/cytoscape/dist/cytoscape.min.js")"></script>
<script src="@Url.Content("~/vendor/moment/min/moment.min.js")"></script>
<script src="@Url.Content("~/vendor/bootstrap-select/dist/js/bootstrap-select.min.js")"></script>
