@{
    ViewData["Title"] = "Freq. Perf. Graph";
}
<link href="@Url.Content("~/css/Graphs.css")" rel="stylesheet" />
<link href="@Url.Content("~/css/Loading.css")" rel="stylesheet" />
<div class="row">
    <div class="col-md-5">
       <div id="divSelectGraph" class="card border-0">
           <div class="card-body">
               <h4>Escolha o tipo de grafo</h4>
               <div class="collapse pt-3 show">
                   <div class="col-sm-12 row">
                       <div class="form-check form-check-inline">
                           <input class="form-check-input" type="radio" name="graph" id="frequencyRadio" value="frequency" onclick="handleGraph(this);" checked>
                           <label class="form-check-label" for="frequencyRadio">Grafo de frequência</label>
                       </div>
                       <div class="form-check form-check-inline">
                           <input class="form-check-input" type="radio" name="graph" id="performanceRadio" onclick="handleGraph(this);" value="performance">
                           <label class="form-check-label" for="performanceRadio">Grafo de desempenho</label>
                       </div>
                   </div>
               </div>
           </div>
        </div>
        <div id="divSelectAlgorithm" class="card border-0">
            <div class="card-body">
                <h4>Escolha um algoritmo</h4>
                <div class="collapse pt-3 show">
                    <div class="col-sm-12 row">
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="miner" id="alphaRadio" value="alpha-miner" onclick="handleMiner(this);" checked>
                            <label class="form-check-label" for="alphaRadio">Alpha</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="miner" id="heuristicRadio" onclick="handleMiner(this);" value="heuristic-miner">
                            <label class="form-check-label" for="heuristicRadio">Heuristíco</label>
                        </div>
                        <div class="form-inline" id="divTreshold">
                            <div class="form-group">
                                <label for="thresholdInput">Threshold</label>
                                <input type="number" class="form-control mx-sm-2" id="thresholdInput" value="0.1" step=".1" min="0" max="1" style="height: 20px">
                                <small id="thresholdHelp" class="text-muted">O threshold têm que ser entre 0 e 1</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card border-0">
            <div class="card-body">
                <h4 id="processSelected" class="header-title mb-0">Escolha um processo</h4>
                <div class="collapse pt-3 show">
                    <div class="row">
                        <div class="col-sm-9">
                            <div class="form-group">
                                <select id="inputProcesses" name="processes" class="selectpicker form-control" data-size="6">
                                    <option value="" disabled selected>Escolha um processo</option>
                                </select>
                            </div>
                        </div>
                        <div class="col">
                            <div class="form-group">
                                <button id="centerButton" class="btn btn-secondary pull-right" disabled><i class="fas fa-project-diagram"></i>Centrar grafo</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card border-0">
            <div class="card-body" style="height:380.1px">
                <div id="infoFrequency">
                    <h4>Informação do grafo de frequência</h4>
                    <p>Grafo que representa a frequência que cada atividade teve no processo</p>
                    <div class="collapse pt-3 show">
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="rectangle darkBlue">Fresagem</div>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-dark align-middle" style="position: relative;top: 6px;">Quanto mais azul, mais frequente é a atividade no processo</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="rectangle softBlue">Fresagem</div>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-dark align-middle" style="position: relative;top: 6px;">Quanto menos azul, menos frequente é a atividade no processo</p>
                            </div>
                        </div><br />
                        <div class="row">
                            <div class="col-sm-3 row">
                                <div class="darkBlue-rectangle-shape"></div>
                                <div class="darkBlue-triangle-shape"></div>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-dark align-middle" style="left: 25px;position: relative;">Quanto mais azul, mais frequente é a relação entre as atividades no processo</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3 row">
                                <div class="softBlue-rectangle-shape"></div>
                                <div class="softBlue-triangle-shape"></div>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-dark align-middle" style="left: 25px;position: relative;">Quanto menos azul, menos frequente é a relação entre as atividades no processo</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div id="infoPerformance" style="display: none">
                    <h4>Informação do grafo de desempenho</h4>
                    <p>Grafo que representa o desempenho que cada atividade teve no processo</p>
                    <div class="collapse pt-3 show">
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="rectangle darkRed">Fresagem</div>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-dark align-middle" style="position: relative;top: 6px;">Quanto mais vermelho, mais tempo (médio) é gasto na execução da atividade no processo</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3">
                                <div class="rectangle softRed">Fresagem</div>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-dark align-middle" style="position: relative;top: 6px;">Quanto menos vermelho, menos tempo (médio) é gasto na execução da atividade no processo</p>
                            </div>
                        </div><br />
                        <div class="row">
                            <div class="col-sm-3 row">
                                <div class="darkRed-rectangle-shape"></div>
                                <div class="darkRed-triangle-shape"></div>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-dark align-middle" style="left: 25px;position: relative;">Quanto mais vermelho, mais tempo (médio) é gasto entre as atividades no processo</p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3 row">
                                <div class="softRed-rectangle-shape"></div>
                                <div class="softRed-triangle-shape"></div>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-dark align-middle" style="left: 25px;position: relative;">Quanto menos vermelho, menos tempo (médio) é gasto entre as atividades no processo</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-7 card-box" style="height: 88.5vh;">
        <div id="loaderCy" style="display: none;"></div>
        <div id="cy">
            <div id="tip">Escolha um processo</div>
        </div>
    </div>
</div>



<script>
    var divTreshold = document.getElementById("divTreshold");
    var divLoaderCy = document.getElementById("loaderCy");
    var divCy = document.getElementById("cy");
    var thresholdInput = document.getElementById("thresholdInput");
    var centerButton = document.getElementById("centerButton");
    var divTip = document.getElementById("tip");
    var processes = JSON.parse(@Html.Raw(Json.Serialize(ViewData["processes"])));
    var cy = null;
    var stillUpdating = false;

    var process = {
        idProcess: '',
        nameProcess: '',
        miner: 'alpha-miner',
        graph: 'frequency',
        data: '',
        nodeTimes: [],
        relationTimes: [],
        edgesMaxTime: '',
        nodesMaxTime: ''
    };

    divTreshold.style.display = "none";

    function handleGraph(myRadio) {
        if (myRadio.value == 'frequency') {
            process.graph = 'frequency';
            $("#infoPerformance").css("display", "none");
            $("#infoFrequency").css("display", "block");
        } else {
            process.graph = 'performance';
            $("#infoFrequency").css("display", "none");
            $("#infoPerformance").css("display", "block");
        }
        if (process.idProcess) {
            if (!stillUpdating) {
                generateGraph();
                return;
            }
            stillUpdating = true;
        }
    }

    function handleMiner(myRadio) {
        process.miner = myRadio.value;
        radioCheckButtonsChange = true;
        if (myRadio.value == 'alpha-miner') {
            divTreshold.style.display = "none";
        } else {
            divTreshold.style.display = "block";
        }
        if (process.idProcess) {
            if (!stillUpdating) {
                getData();
                return;
            }
            stillUpdating = true;
        }
    }

    (function($){
        $.fn.extend({
            donetyping: function(callback,timeout){
                timeout = timeout || 1e3;
                var timeoutReference,
                    doneTyping = function(el){
                        if (!timeoutReference) {
                            return;
                        }
                        timeoutReference = null;
                        callback.call(el);
                    };
                return this.each(function(i,el){
                    var $el = $(el);
                    $el.is(':input') && $el.on('keyup keypress paste',function(e){
                        if (e.type == 'keyup' && e.keyCode != 8) {
                            return;
                        }
                        if (timeoutReference) {
                            clearTimeout(timeoutReference);
                        }
                        timeoutReference = setTimeout(function(){
                            doneTyping(el);
                        }, timeout);
                    }).on('blur',function(){
                        doneTyping(el);
                    });
                });
            }
        });
    })(jQuery);

    $('#thresholdInput').donetyping(function(){
        if (process.idProcess && $(this).val() >= 0 && $(this).val() <= 1) {
            if (!stillUpdating) {
                getData();
                return;
            }
            stillUpdating = true;
        }
    });

    if (processes.length != 0) {
        for (var i = 0; i < processes.length; i++) {
            var option = document.createElement("option");
            option.setAttribute("value", processes[i].id);
            option.text = processes[i].name;
            inputProcesses.appendChild(option);
        }
    }

    function loading(x, y) {
        x.style.display = "none";
        y.style.display = "block";
    }

    function generateGraph() {
        var element = document.getElementById("tip");
        if (typeof (element) != 'undefined' && element != null) {
            element.style.display = "none";
        }
        if (process.graph == 'frequency') {
            
            renderCytoscapeElementFrequency();
        } else {
            let nodeTimes = [];
            for (let i = 0; i < process.data.statistics.nodes.length; i++) {
                let meanDuration = process.data.statistics.nodes[i].meanDuration.days + '.' + process.data.statistics.nodes[i].meanDuration.hours + ':' +
                    process.data.statistics.nodes[i].meanDuration.minutes + ':' + process.data.statistics.nodes[i].meanDuration.seconds + '.' + process.data.statistics.nodes[i].meanDuration.millis;
                nodeTimes[i] = moment.duration(meanDuration).asMinutes();
            }

            let relationTimes = [];
            for (let i = 0; i < process.data.statistics.relations.length; i++) {
                let relationTimesTemp = [];
                for (let j = 0; j < process.data.statistics.relations[i].to.length; j++) {
                    let meanDuration = process.data.statistics.relations[i].to[j].meanDuration.days + '.' + process.data.statistics.relations[i].to[j].meanDuration.hours + ':' +
                        process.data.statistics.relations[i].to[j].meanDuration.minutes + ':' + process.data.statistics.relations[i].to[j].meanDuration.seconds + '.' + process.data.statistics.relations[i].to[j].meanDuration.millis;
                    relationTimesTemp[j] = moment.duration(meanDuration).asMinutes();
                }
                relationTimes[i] = relationTimesTemp;
            }
            process.nodeTimes = nodeTimes;
            process.relationTimes = relationTimes;
            renderCytoscapeElementPerformance();
        }
    }

    function getData() {
        loading(divCy, divLoaderCy);
        stillUpdating = false;
        $.ajax({
            type: "POST",
            data: {
                process: process.idProcess,
                miner: process.miner,
                threshold: thresholdInput.value
            },
            url: "/Graph/GetWorkFlow",
            dataType: 'json',
            success: function (response) {
                if (stillUpdating) {
                    getData();
                }
                stillUpdating = false;
                if (response.success) {
                    process.data = response.request;
                    loading(divLoaderCy, divCy);
                    centerButton.disabled = false;
                    generateGraph();
                } else {
                    loading(divLoaderCy, divCy);
                    $('#processSelected').empty();
                    $('#processSelected').text('Escolha um processo com atividades');
                    resetGraph();
                    centerButton.disabled = true;
                }
            },
            error: function (response) {
                alert("error!");  //
            }
        });
    }

    function resetGraph() {
        if (cy != null) {
            cy.unmount();

            var element = document.createElement("div");
            element.setAttribute("id", "tip");
            element.appendChild(document.createTextNode('Please select a Process with activities'));
            document.getElementById("cy").appendChild(element);
            return;
        }
        document.getElementById("tip").style.display = "block";
    }

    $("#inputProcesses").change(function () {
        process.idProcess = $(this).val();
        process.nameProcess = $('#inputProcesses option:selected').text();
        $('#processSelected').empty();
        $('#processSelected').text('Processo escolhido: ' + process.nameProcess);
        if (!stillUpdating) {
            getData();
            return;
        }
        stillUpdating = true;
    });

    function renderCytoscapeElementFrequency() {
    cy = cytoscape(
        {
            wheelSensitivity: 0.5,
            minZoom: 0.1,
            maxZoom: 1,
            container: document.getElementById('cy'),
            style: [
                {
                    //Nodes styles
                    selector: 'node[type=0]',
                    style: {
                        "shape": 'rectangle',
                        "background-color": "#FFFFFF",
                        "label": "data(label)",
                        'width': '350',
                        "height": "40",
                        "border-width": 2,
                        "border-color": "#484848",
                        "font-size": "16px",
                        "text-valign": "center",
                        "text-halign": "center",
                        "text-wrap": "wrap",
                        "text-max-width": "1000px",
                        "color": "#222222"
                    }
                },
                {
                    selector: 'node[type=1]',
                    style: {
                        "shape": 'rectangle',
                        "background-color": "#acbcff",
                        "label": "data(label)",
                        'width': '350',
                        "height": "40",
                        "border-width": 2,
                        "border-color": "#484848",
                        "font-size": "16px",
                        "text-valign": "center",
                        "text-halign": "center",
                        "color": "#222222"
                    }
                },
                {
                    selector: 'node[type=2]',
                    style: {
                        "shape": 'rectangle',
                        "background-color": "#748fff",
                        "label": "data(label)",
                        'width': '350',
                        "height": "40",
                        "border-width": 2,
                        "border-color": "#484848",
                        "font-size": "16px",
                        "text-valign": "center",
                        "text-halign": "center",
                        "color": "#222222"
                    }
                },
                {
                    selector: 'node[type=3]',
                    style: {
                        "shape": 'rectangle',
                        "background-color": "#365eff",
                        "label": "data(label)",
                        'width': '350',
                        "height": "40",
                        "border-width": 2,
                        "border-color": "#484848",
                        "font-size": "16px",
                        "text-valign": "center",
                        "text-halign": "center",
                        "color": "#222222"
                    }
                },
                {
                    selector: 'node[type=4]',
                    style: {
                        "shape": 'rectangle',
                        "background-color": "#0032ff",
                        "label": "data(label)",
                        'width': '350',
                        "height": "40",
                        "border-width": 2,
                        "border-color": "#484848",
                        "font-size": "16px",
                        "text-valign": "center",
                        "text-halign": "center",
                        "color": "#FFFFFF"
                    }
                },
                {
                    //process start node
                    selector: 'node[type=20]',
                    style: {
                        "shape": 'ellipse',
                        "background-color": "#3f3f3f",
                        "border-width": 4,
                        "border-color": "#131313",
                        'width': '50',
                        "height": "50",
                        "font-size": "16px",
                        "text-valign": "center",
                        "text-halign": "center",
                        "text-wrap": "wrap",
                        "text-max-width": "1000px",
                        "color": "#FF2222"
                    }
                },

                //Edges styles
                {
                    selector: 'edge[type=0]',
                    style: {
                        'width': 3,
                        'curve-style': 'bezier',
                        "content": "data(name)",
                        "line-color": "#D1D1D1",
                        'target-arrow-color': '#D1D1D1',
                        "font-size": "32px",
                        "color": "#222222",
                        "loop-direction": "0deg",
                        'target-arrow-shape': 'triangle',
                        "loop-sweep": "45deg",
                        "text-margin-y": "-15px",
                        "source-text-offset": "50px"
                    }
                },
                {
                    selector: 'edge[type=1]',
                    style: {
                        'width': 5,
                        'curve-style': 'bezier',
                        "content": "data(name)",
                        "line-color": "#acbcff",
                        'target-arrow-color': '#acbcff',
                        "font-size": "32px",
                        "color": "#222222",
                        "loop-direction": "0deg",
                        'target-arrow-shape': 'triangle',
                        "loop-sweep": "45deg",
                        "text-margin-y": "-15px",
                        "source-text-offset": "50px"
                    }
                },
                {
                    selector: 'edge[type=2]',
                    style: {
                        'width': 7,
                        'curve-style': 'bezier',
                        "content": "data(name)",
                        "line-color": "#748fff",
                        'target-arrow-color': '#748fff',
                        "font-size": "32px",
                        "color": "#222222",
                        "loop-direction": "0deg",
                        'target-arrow-shape': 'triangle',
                        "loop-sweep": "45deg",
                        "text-margin-y": "-15px",
                        "source-text-offset": "50px"
                    }
                },
                {
                    selector: 'edge[type=3]',
                    style: {
                        'width': 9,
                        'curve-style': 'bezier',
                        "content": "data(name)",
                        "line-color": "#365eff",
                        'target-arrow-color': '#365eff',
                        "font-size": "32px",
                        "color": "#222222",
                        "loop-direction": "0deg",
                        'target-arrow-shape': 'triangle',
                        "loop-sweep": "45deg",
                        "text-margin-y": "-15px",
                        "source-text-offset": "50px"
                    }
                },
                {
                    selector: 'edge[type=4]',
                    style: {
                        'width': 13,
                        'curve-style': 'bezier',
                        "content": "data(name)",
                        "line-color": "#0032ff",
                        'target-arrow-color': '#0032ff',
                        "font-size": "32px",
                        "color": "#222222",
                        "loop-direction": "0deg",
                        'target-arrow-shape': 'triangle',
                        "loop-sweep": "45deg",
                        "text-margin-y": "-15px",
                        "source-text-offset": "50px"
                    }
                },
                {
                    //process start edge
                    selector: 'edge[type=20]',
                    style: {
                        'width': 8,
                        'curve-style': 'bezier',
                        'line-color': "#232323",
                        'target-arrow-color': '#232323',
                        "font-size": "32px",
                        "color": "#222222",
                        "loop-direction": "0deg",
                        'target-arrow-shape': 'triangle',
                        "loop-sweep": "45deg",
                        "text-margin-y": "-15px",
                        "source-text-offset": "50px",
                        "text-outline-color": "#222222",
                        "text-outline-width": "0.3px"
                    }
                },
            ],
        });
    //find max frequency value
    //nodes max frequency
    var maxFrequency = 0;
    for (let i = 0; i < process.data.nodes.length; i++) {
        if (process.data.statistics.nodes[i].frequency > maxFrequency) {
            maxFrequency = process.data.statistics.nodes[i].frequency;
        }
    }

    //edges max frequency
    for (let i = 0; i < process.data.statistics.relations.length; i++) {
        for (let j = 0; j < process.data.statistics.relations[i].to.length; j++) {
            if (process.data.statistics.relations[i].to[j].frequency > maxFrequency) {
                maxFrequency = process.data.statistics.relations[i].to[j].frequency;
            }
        }
    }
    var legendSetUp = [0, 0, 0, 0];
    //Nodes\\
    for (let i = 0; i < process.data.nodes.length; i++) {
        let typeValue = Math.round(process.data.statistics.nodes[i].frequency * 4 / maxFrequency);
        //asd[typeValue] = process.data.statistics.nodes[i].frequency;
        cy.add({
            data: {
                id: i,
                label: process.data.nodes[i] + ' (' + process.data.statistics.nodes[i].frequency + ')',
                type: typeValue
            },
        }
        );
    }
    process.maxFrequency = maxFrequency;

    //Edges\\
    for (let i = 0; i < process.data.relations.length; i++) {
        for (let j = 0; j < process.data.relations[i].to.length; j++) {
            let typeValue = Math.round(process.data.statistics.relations[i].to[j].frequency * 4 / maxFrequency);
            cy.add({
                data: {
                    id: 'edge' + process.data.relations[i].from + '-' + process.data.relations[i].to[j],
                    source: process.data.relations[i].from,
                    target: process.data.relations[i].to[j],
                    name: process.data.statistics.relations[i].to[j].frequency,
                    type: typeValue
                }
            });
        }
    }

    //add process start and end nodes
    for (let i = 0; i < process.data.startEvents.length; i++) {
        cy.add({
            data: {
                id: 'start-' + i,
                type: 20
            },
        });

        cy.add({
            data: {
                id: 'edge_start-' + i,
                source: 'start-' + i,
                target: process.data.startEvents[i].node,
                type: 20
            }
        });
    }

    for (let i = 0; i < process.data.endEvents.length; i++) {
        cy.add({
            data: {
                id: 'end-' + i,
                type: 20
            },
        });

        cy.add({
            data: {
                id: 'edge_end-' + i,
                source: process.data.endEvents[i].node,
                target: 'end-' + i,
                type: 20
            }
        });
    }

    let customBreadthfirst = {
        name: 'breadthfirst',

        fit: true, // whether to fit the viewport to the graph
        directed: true, // whether the tree is directed downwards (or edges can point in any direction if false)
        padding: 10, // padding on fit
        circle: false, // put depths in concentric circles if true, put depths top down if false
        grid: false, // whether to create an even grid into which the DAG is placed (circle:false only)
        spacingFactor: 0.90, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
        boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
        avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
        nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
        roots: undefined, // the roots of the trees
        maximal: false, // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)
        animate: false, // whether to transition the node positions
        animationDuration: 500, // duration of animation in ms if enabled
        animationEasing: undefined, // easing of animation if enabled,
        animateFilter: function (node, i) {
            return true;
        }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
        ready: undefined, // callback on layoutready
        stop: undefined, // callback on layoutstop
        transform: function (node, position) {
            return position;
        } // transform a given node position. Useful for changing flow direction in discrete layouts
    };

    cy.layout(customBreadthfirst).run();
    };
    function renderCytoscapeElementPerformance() {
        cy = cytoscape(
            {
                wheelSensitivity: 0.5,
                minZoom: 0.1,
                maxZoom: 1,
                container: document.getElementById('cy'),

                style: [
                    {
                        //Nodes styles
                        selector: 'node[type=0]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FFFFFF",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 2,
                            "border-color": "#484848",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "color": "#222222"
                        }
                    },
                    {
                        selector: 'node[type=1]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FFB7B7",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 2,
                            "border-color": "#484848",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "color": "#222222"
                        }
                    },
                    {
                        selector: 'node[type=2]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FF8A8A",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 2,
                            "border-color": "#484848",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "color": "#222222"
                        }
                    },
                    {
                        selector: 'node[type=3]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FF5C5C",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 2,
                            "border-color": "#484848",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "color": "#222222"
                        }
                    },
                    {
                        selector: 'node[type=4]',
                        style: {
                            "shape": 'rectangle',
                            "background-color": "#FF0000",
                            "label": "data(label)",
                            'width': '350',
                            "height": "40",
                            "border-width": 2,
                            "border-color": "#484848",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "color": "#FFFFFF"
                        }
                    },
                    {
                        //process start node
                        selector: 'node[type=20]',
                        style: {
                            "shape": 'ellipse',
                            "background-color": "#3f3f3f",
                            "border-width": 4,
                            "border-color": "#131313",
                            'width': '50',
                            "height": "50",
                            "font-size": "16px",
                            "text-valign": "center",
                            "text-halign": "center",
                            "text-wrap": "wrap",
                            "text-max-width": "1000px",
                            "color": "#FF2222"
                        }
                    },

                    //Edges styles
                    {
                        selector: 'edge[type=0]',
                        style: {
                            'width': 3,
                            'curve-style': 'bezier',
                            "content": "data(name)",
                            "line-color": "#D1D1D1",
                            'target-arrow-color': '#D1D1D1',
                            "font-size": "32px",
                            "color": "#222222",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px"
                        }
                    },
                    {
                        selector: 'edge[type=1]',
                        style: {
                            'width': 5,
                            'curve-style': 'bezier',
                            "content": "data(name)",
                            "line-color": "#FFB7B7",
                            'target-arrow-color': '#FFB7B7',
                            "font-size": "32px",
                            "color": "#222222",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px"
                        }
                    },
                    {
                        selector: 'edge[type=2]',
                        style: {
                            'width': 7,
                            'curve-style': 'bezier',
                            "content": "data(name)",
                            "line-color": "#FF8A8A",
                            'target-arrow-color': '#FF8A8A',
                            "font-size": "32px",
                            "color": "#222222",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px"
                        }
                    },
                    {
                        selector: 'edge[type=3]',
                        style: {
                            'width': 9,
                            'curve-style': 'bezier',
                            "content": "data(name)",
                            "line-color": "#FF5C5C",
                            'target-arrow-color': '#FF5C5C',
                            "font-size": "32px",
                            "color": "#222222",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px"
                        }
                    },
                    {
                        selector: 'edge[type=4]',
                        style: {
                            'width': 13,
                            'curve-style': 'bezier',
                            "content": "data(name)",
                            "line-color": "#FF0000",
                            'target-arrow-color': '#FF0000',
                            "font-size": "32px",
                            "color": "#222222",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px"
                        }
                    },
                    {
                        //process start edge
                        selector: 'edge[type=20]',
                        style: {
                            'width': 8,
                            'curve-style': 'bezier',
                            'line-color': "#232323",
                            'target-arrow-color': '#232323',
                            "font-size": "32px",
                            "color": "#222222",
                            "loop-direction": "0deg",
                            'target-arrow-shape': 'triangle',
                            "loop-sweep": "45deg",
                            "text-margin-y": "-15px",
                            "source-text-offset": "50px",
                            "text-outline-color": "#222222",
                            "text-outline-width": "0.3px"
                        }
                    },
                ],
            });

        //find max time
        //nodes max time
        let nodesMaxTime = 0;
        for (let i = 0; i < process.nodeTimes.length; i++) {
            if (process.nodeTimes[i] > nodesMaxTime) {
                nodesMaxTime = process.nodeTimes[i];
            }
        }
        process.nodesMaxTime = nodesMaxTime;

        //edges max time
        let edgesMaxTime = 0;
        for (let i = 0; i < process.relationTimes.length; i++) {
            for (let j = 0; j < process.relationTimes[i].length; j++) {
                if (process.relationTimes[i][j] > edgesMaxTime) {
                    edgesMaxTime = process.relationTimes[i][j];
                }
            }
        }
        process.edgesMaxTime = edgesMaxTime;

        //Nodes\\
        for (let i = 0; i < process.data.nodes.length; i++) {
            let typeValue = Math.floor(process.nodeTimes[i] * 4 / nodesMaxTime);
            cy.add({
                data: {
                    id: i,
                    label: process.data.nodes[i] + ' (' + durationToString(process.nodeTimes[i]) + ')',
                    type: typeValue
                },
            }
            );
        }

        //Edges\\
        for (let i = 0; i < process.data.relations.length; i++) {
            for (let j = 0; j < process.data.relations[i].to.length; j++) {
                let typeValue = Math.round(process.relationTimes[i][j] * 4 / edgesMaxTime);
                cy.add({
                    data: {
                        id: 'edge' + process.data.relations[i].from + '-' + process.data.relations[i].to[j],
                        source: process.data.relations[i].from,
                        target: process.data.relations[i].to[j],
                        name: durationToString(process.relationTimes[i][j]),
                        type: typeValue
                    }
                });
            }
        }

        //add process start and end nodes
        for (let i = 0; i < process.data.startEvents.length; i++) {
            cy.add({
                data: {
                    id: 'start-' + i,
                    type: 20
                },
            });

            cy.add({
                data: {
                    id: 'edge_start-' + i,
                    source: 'start-' + i,
                    target: process.data.startEvents[i].node,
                    type: 20
                }
            });
        }

        for (let i = 0; i < process.data.endEvents.length; i++) {
            cy.add({
                data: {
                    id: 'end-' + i,
                    type: 20
                },
            });

            cy.add({
                data: {
                    id: 'edge_end-' + i,
                    source: process.data.endEvents[i].node,
                    target: 'end-' + i,
                    type: 20
                }
            });
        }

        let customBreadthfirst = {
            name: 'breadthfirst',

            fit: true, // whether to fit the viewport to the graph
            directed: true, // whether the tree is directed downwards (or edges can point in any direction if false)
            padding: 10, // padding on fit
            circle: false, // put depths in concentric circles if true, put depths top down if false
            grid: false, // whether to create an even grid into which the DAG is placed (circle:false only)
            spacingFactor: 0.90, // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
            boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
            avoidOverlap: true, // prevents node overlap, may overflow boundingBox if not enough space
            nodeDimensionsIncludeLabels: false, // Excludes the label when calculating node bounding boxes for the layout algorithm
            roots: undefined, // the roots of the trees
            maximal: false, // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)
            animate: false, // whether to transition the node positions
            animationDuration: 500, // duration of animation in ms if enabled
            animationEasing: undefined, // easing of animation if enabled,
            animateFilter: function (node, i) {
                return true;
            }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
            ready: undefined, // callback on layoutready
            stop: undefined, // callback on layoutstop
            transform: function (node, position) {
                return position;
            } // transform a given node position. Useful for changing flow direction in discrete layouts
        };
        cy.layout(customBreadthfirst).run();
    }
    function durationToString(duration) {
        if (duration == 0) {
            return "0S";
        }
        return ((moment.duration({ "minutes": duration }).days() !== 0) ? moment.duration({ "minutes": duration }).days() + "D " : "") +
            ((moment.duration({ "minutes": duration }).hours() !== 0) ? moment.duration({ "minutes": duration }).hours() + "H " : "") +
            ((moment.duration({ "minutes": duration }).minutes() !== 0) ? moment.duration({ "minutes": duration }).minutes() + "M " : "") +
            ((moment.duration({ "minutes": duration }).seconds() !== 0) ? moment.duration({ "minutes": duration }).seconds() + "S" : "");
    }
    $("#centerButton").click(function () {
        if (typeof cy !== "undefined") {
            cy.fit();
        }
    });
</script>
<script src="@Url.Content("~/vendor/cytoscape/dist/cytoscape.min.js")"></script>
<script src="@Url.Content("~/vendor/moment/min/moment.min.js")"></script>
<script src="@Url.Content("~/vendor/bootstrap-select/dist/js/bootstrap-select.min.js")"></script>
