@{
    var processId = ViewData["processId"];
    string type = ViewData["type"] as string;
    string typeResource = ViewData["typeResource"] as string;
    IEnumerable<Pmviz_Frontend.Models.Activity> activities = ViewData["activities"] as IEnumerable<Pmviz_Frontend.Models.Activity>;
    IEnumerable<Pmviz_Frontend.Models.Workstation> workstations = ViewData["workstations"] as IEnumerable<Pmviz_Frontend.Models.Workstation>;
    string activityChosen = ViewData["activity"] as string;
    string workstationChosen = ViewData["workstation"] as string;
    var moulds = ViewData["moulds"] as List<String>;
    var parts = ViewData["parts"] as List<String>;
    string hasValues = ViewData["hasValues"] as string;
    var meanMinutesAll = ViewData["meanMillis"];
    var totalEffort = ViewData["totalWorkHoursMillis"];
    var allResources = ViewData["allResources"] as IEnumerable<Pmviz_Frontend.Models.ResourceStat>;
    var allResourcesEffort = ViewData["allResourcesEffort"] as IEnumerable<Pmviz_Frontend.Models.ResourceEffort>;
    var operationalEffort = ViewData["allResourcesEffort"] as IEnumerable<Pmviz_Frontend.Models.WorkstationEffort>;
    IEnumerable<Pmviz_Frontend.Models.WorkstationFreq> frequency = ViewData["Frequency"] as IEnumerable<Pmviz_Frontend.Models.WorkstationFreq>;
    IEnumerable<Pmviz_Frontend.Models.WorkstationFreq> median = ViewData["Median"] as IEnumerable<Pmviz_Frontend.Models.WorkstationFreq>;
    IEnumerable<Pmviz_Frontend.Models.WorkstationFreq> mean = ViewData["Mean"] as IEnumerable<Pmviz_Frontend.Models.WorkstationFreq>;

}
@model IEnumerable<Pmviz_Frontend.Models.WorkstationFreq>
@{
    ViewData["Title"] = "Recursos";
}
<link href="@Url.Content("~/css/Loading.css")" rel="stylesheet" />

<div class="row">
    <div class="col-md-3 col-xl-3">
        <div class="card-box" style="height: 428px;">
            <a href="/Log/Activity?id=@processId" class="btn btn-secondary btn-sm col-lg-12" style="white-space:normal !important;max-width:400px;margin-bottom:4px; word-wrap:break-word;">
                <i class="fas fa-chart-bar"></i>Estatísticas das atividades do processo
            </a>
            <small class="form-text text-muted">Ver a estatística das atividades do processo selecionado</small>
            <h4 class="text-dark my-1">Estatísticas de Recursos</h4>
            <h5 class="text-dark">Processo: @processId</h5>
            @if (activities != null && workstations != null)
            {
            <div id="radioForms" style="max-height: 73%; overflow-y: auto; overflow-x:hidden">
                <form method="post" action='@Url.Action("Resource", "Log", new { id = processId })'>
                    <h6>Escolha um tipo de recurso:</h6>
                    @if (typeResource == "user")
                    {
                        <input type="radio" name="typeR" id="userCheck" value="user" checked>
                    }
                    else
                    {
                        <input type="radio" name="typeR" value="user" onclick="handleRadio(this);">

                    }
                    <label for="user">Utilizadores</label>
                    <br />
                    @if (typeResource == "workstation")
                    {
                        <input type="radio" name="typeR" id="workCheck" value="workstation" checked>
                    }
                    else
                    {
                        <input type="radio" name="typeR" value="workstation" onclick="handleRadio(this);">

                    }
                    <label for="workstation">Estações</label>
                    <br />
                    <h6>Escolha um tipo de estatísticas:</h6>
                    <div id="option">
                        @if (type == "mean")
                        {
                            <input type="radio" name="type" value="mean" checked>
                        }
                        else
                        {
                            <input type="radio" name="type" value="mean" id="typeWorkstation" onclick="handleMiner(this);">

                        }
                        <label for="mean">Desempenho</label>
                        <br />
                        @if (type == "effort")
                        {
                            <input type="radio" name="type" value="effort" checked>
                        }
                        else
                        {
                            <input type="radio" name="type" value="effort" onclick="handleMiner(this);">
                        }
                        <label for="effort">Tempo de Trabalho</label>
                        <br />
                        @if (type == "effortWorkstation")
                        {
                            <input type="radio" name="type" value="effortWorkstation" checked>
                        }
                        else
                        {
                            <input type="radio" name="type" value="effortWorkstation" onclick="handleMiner(this);">
                        }
                        <label for="effort">Trabalho por Estação</label>
                    </div>
                    <div id="option2">
                        @if (type == "meanWork")
                        {
                            <input type="radio" name="type" value="meanWork" checked>
                        }
                        else
                        {
                            <input type="radio" name="type" id="radioPerformanceWork" value="meanWork" onclick="handleMiner(this);">

                        }
                        <label for="mean">Desempenho das Estações</label>
                        <br />
                        @if (type == "effortWork")
                        {
                            <input type="radio" name="type" value="effortWork" checked>
                        }
                        else
                        {
                            <input type="radio" name="type" value="effortWork" onclick="handleMiner(this);">
                        }
                        <label for="effort">Tempo Operacional</label>
                    </div>

                    <div id="acts">
                        <h6>Escolha uma atividade:</h6>
                        <select name="activity" class="btn-sm btn-light dropdown-toggle" id="actv" onchange="handleAct(this)">
                            <option value="" disabled selected>Escolha uma atividade</option>

                            @foreach (var act in activities)
                            {
                                if (activityChosen == act.Id.ToString())
                                {
                                    <option value="@act.Id" selected>@act.Id - @act.Name</option>
                                }
                                else
                                {
                                    <option value="@act.Id">@act.Id - @act.Name</option>
                                }
                            }


                        </select>
                    </div>
                    <div id="stations">
                        <h6>Escolha uma Estação:</h6>
                        <select name="workstation" class="btn-sm btn-light dropdown-toggle" id="works" onchange="handleWork(this)">
                            <option value="" disabled selected>Escolha uma Estação</option>

                            @foreach (var w in workstations)
                            {
                                if (workstationChosen == w.Id.ToString())
                                {
                                    <option value="@w.Id" selected>@w.Id - @w.Name</option>
                                }
                                else
                                {
                                    <option value="@w.Id">@w.Id - @w.Name</option>
                                }
                            }


                        </select>
                    </div>
                    <div>
                        <button class="btn-xs btn-primary" type="submit" id="send" hidden>Submit</button>
                    </div>
                </form>
            </div>
            }
            else
            {
                <div>
                    <a href='@Url.Action("Index","Log")' class="btn btn-danger">Voltar</a>
                </div>
            }
        </div>
        @if (type != "meanWork" && (meanMinutesAll != null || totalEffort != null || hasValues == "true") && ViewBag.Error == null && ViewBag.ErrorActivity == null && ViewBag.ErrorWorkstations == null)
        {
            <div class="card-box">
                <div class="form-group">
                    <label class="text-dark">Data Inicial</label>
                    <div class="input-group input-group-sm">
                        <input class="form-control" type="date" id="inputStartFilter" onkeydown="event.preventDefault()">
                        <div class="input-group-append">
                            <button class="btn btn-danger datepicker-btn" type="button" onclick="clearCalendar('inputStartFilter')"><i class="fas fa-times"></i></button>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="text-dark">Data Final</label>
                    <div class="input-group input-group-sm">
                        <input class="form-control" type="date" id="inputEndFilter" onkeydown="event.preventDefault()">
                        <div class="input-group-append">
                            <button class="btn btn-danger datepicker-btn" type="button" onclick="clearCalendar('inputEndFilter')"><i class="fas fa-times"></i></button>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <button id="filterGraph" class="form-control btn-primary disabled" type="button" disabled>Filtrar Gráfico</button>
                </div>
            </div>
        }
    </div>
    <div class="col">
        @if (ViewBag.Error != null || ViewBag.ErrorActivity != null || ViewBag.ErrorWorkstations != null)
        {
            @if (ViewBag.ErrorActivity != null)
            {
                <div class="alert alert-danger" role="alert">
                    @ViewBag.ErrorActivity
                </div>
            }
            @if (ViewBag.ErrorWorkstations != null)
            {
                <div class="alert alert-danger" role="alert">
                    @ViewBag.ErrorWorkstations
                </div>
            }
            @if (ViewBag.Error != null)
            {
                <div class="alert alert-danger" role="alert">
                    @ViewBag.Error
                </div>
            }
            <div class="container" style="text-align:center">
                <a href='@Url.Action("Index","Log")' class="btn btn-danger">Voltar</a>
            </div>
        }
        else
        {
            @if ((type == "mean" || type == "effort" || type == "effortWorkstation" || type == "effortWork" || type == "meanWork")
     && (meanMinutesAll != null || totalEffort != null || hasValues == "true"))
            {
                <div class="card-box" style="height: 428px">
                    <div id="loader" style="display: none; position: relative;"></div>
                    <div id="divGraph">
                        @if (type == "meanWork")
                        {
                            <div class="col">
                                <div class="container-fluid" style="text-align:center">
                                    <button class="btn btn-primary" id="frequencyButton" type="button">Frequência</button>
                                    <button class="btn btn-primary" id="medianButton" type="button">Mediana</button>
                                    <button class="btn btn-primary" id="meanButton" type="button">Média</button>
                                </div>
                                <br />
                                <div id="frequencyChart">
                                    @(Html.Kendo().Chart(frequency)
                                            .Name("chart")
                                            .Legend(legend => legend
                                            .Position(ChartLegendPosition.Top))
                                            .Series(series =>
                                            {
                                                series.Column(a => a.Frequency).Name("Frequência").CategoryField("Workstation");
                                            })
                                            .CategoryAxis(axis => axis
                                                .Labels(labels => labels.Rotation(0))
                                                .MajorGridLines(lines => lines.Visible(true))
                                            )
                                            .ValueAxis(axis => axis
                                                .Labels(l => l.Visible(true))
                                                .Title("Frequência")
                                            )
                                        .Tooltip(tooltip => tooltip
                                            .Visible(true)
                                            .Template("#= series.name #: #= value #")
                                        )
                                        .ChartArea(x => x.Height(315))
                                        .Pannable(pannable => pannable
                                            .Lock(ChartAxisLock.Y)
                                        )
                                        .Zoomable(zoomable => zoomable
                                            .Mousewheel(mousewheel => mousewheel.Lock(ChartAxisLock.Y))
                                            .Selection(selection => selection.Lock(ChartAxisLock.Y))
                                        )


                                )
                                </div>
                                <div id="medianChart">
                                    @(Html.Kendo().Chart(median)
                                    .Name("chart_median")
                                    .Legend(legend => legend
                                        .Position(ChartLegendPosition.Top))
                                    .Series(series =>
                                    {
                                        series.Column(a => a.MedianInMinutes).Name("Mediana em Minutos").CategoryField("Workstation");
                                    })
                                    .CategoryAxis(axis => axis
                                        .Labels(labels => labels.Rotation(0))
                                        .MajorGridLines(lines => lines.Visible(true))
                                    )
                                    .ValueAxis(axis => axis
                                        .Labels(l => l.Visible(true))
                                        .Title("Mediana")
                                    )
                                    .Tooltip(tooltip => tooltip
                                        .Visible(true)
                                        .Template("#= dataItem.MedianActivityFormatted #")
                                    )
                                    .ChartArea(x => x.Height(315))
                                    .Pannable(pannable => pannable
                                        .Lock(ChartAxisLock.Y)
                                    )
                                    .Zoomable(zoomable => zoomable
                                        .Mousewheel(mousewheel => mousewheel.Lock(ChartAxisLock.Y))
                                        .Selection(selection => selection.Lock(ChartAxisLock.Y))
                                    )
                                )

                                </div>
                                <div id="meanChart">
                                    @(Html.Kendo().Chart(mean)
                                .Name("chart_mean")
                                .Legend(legend => legend
                                    .Position(ChartLegendPosition.Top))
                                .Series(series =>
                                {
                                    series.Column(a => a.MeanInMinutes).Name("Média em Minutos").CategoryField("Workstation");
                                })
                                .CategoryAxis(axis => axis
                                    .Labels(labels => labels.Rotation(0))
                                    .MajorGridLines(lines => lines.Visible(true))
                                )
                                .ValueAxis(axis => axis
                                    .Labels(l => l.Visible(true))
                                    .Title("Média")
                                )
                                .Tooltip(tooltip => tooltip
                                    .Visible(true)
                                    .Template("#= dataItem.MeanActivityFormatted #")
                                )
                                .ChartArea(x => x.Height(315))
                                .Pannable(pannable => pannable
                                    .Lock(ChartAxisLock.Y)
                                )
                                .Zoomable(zoomable => zoomable
                                    .Mousewheel(mousewheel => mousewheel.Lock(ChartAxisLock.Y))
                                    .Selection(selection => selection.Lock(ChartAxisLock.Y))
                                )
                                )

                                </div>
                            </div>

                        }
                        else if (type == "mean")
                        {
                            <div>
                                @(Html.Kendo().Chart(allResources)
                                .Name("chart")
                                .Title("Média")
                                .Legend(legend => legend
                                    .Position(ChartLegendPosition.Top)
                                )
                                .Series(series =>
                                {
                                    series.Column(a => a.MeanMillis).Name("Média em Minutos").CategoryField("Resource");
                                })
                                .CategoryAxis(axis => axis
                                    .Name("series-axis")
                                    .Line(line => line.Visible(true))
                                )
                                .Tooltip(tooltip => tooltip
                                    .Visible(true)
                                    .Format("{0}%")
                                    .Template("#= series.name #: #= value # minutos")
                                )
                                .ChartArea(x => x.Height(375))
                                .Pannable(pannable => pannable
                                    .Lock(ChartAxisLock.Y)
                                )
                                .Zoomable(zoomable => zoomable
                                    .Mousewheel(mousewheel => mousewheel.Lock(ChartAxisLock.Y))
                                    .Selection(selection => selection.Lock(ChartAxisLock.Y))
                                )


                            )
                            </div>

                        }
                        else if (type == "effort" || type == "effortWorkstation")
                        {
                            <div>
                                @(Html.Kendo().Chart(allResourcesEffort)
                                .Name("chart")
                                .Title("Tempo de Trabalho")
                                .Legend(legend => legend
                                    .Position(ChartLegendPosition.Top)
                                )
                                .Series(series =>
                                {
                                    series.Column(a => a.WorkHoursMillis).Name("Tempo de Trabalho em Minutos").CategoryField("Username");
                                })
                                .CategoryAxis(axis => axis
                                    .Name("series-axis")
                                    .Line(line => line.Visible(true))
                                )
                                .Tooltip(tooltip => tooltip
                                    .Visible(true)
                                    .Format("{0}%")
                                    .Template("#= series.name #: #= value # minutos")
                                )
                                .ChartArea(x => x.Height(375))
                                .Pannable(pannable => pannable
                                    .Lock(ChartAxisLock.Y)
                                )
                                .Zoomable(zoomable => zoomable
                                    .Mousewheel(mousewheel => mousewheel.Lock(ChartAxisLock.Y))
                                    .Selection(selection => selection.Lock(ChartAxisLock.Y))
                                )


                            )
                            </div>
                        }
                        else
                        {
                            <div>
                                @(Html.Kendo().Chart(operationalEffort)
                                .Name("chart")
                                .Title("Tempo Operacional")
                                .Legend(legend => legend
                                    .Position(ChartLegendPosition.Top)
                                )
                                .Series(series =>
                                {
                                    series.Column(a => a.OperationalHoursMillis).Name("Tempo Operacional em Minutos").CategoryField("WorkstationName");
                                })
                                .CategoryAxis(axis => axis
                                    .Name("series-axis")
                                    .Line(line => line.Visible(true))
                                )
                                .Tooltip(tooltip => tooltip
                                    .Visible(true)
                                    .Format("{0}%")
                                    .Template("#= series.name #: #= value # minutos")
                                )
                                .ChartArea(x => x.Height(375))
                                .Pannable(pannable => pannable
                                    .Lock(ChartAxisLock.Y)
                                )
                                .Zoomable(zoomable => zoomable
                                    .Mousewheel(mousewheel => mousewheel.Lock(ChartAxisLock.Y))
                                    .Selection(selection => selection.Lock(ChartAxisLock.Y))
                                )


                            )
                            </div>
                        }

                        @if (type != "meanWork")
                        {
                            <div id="infoGraph" style="max-height: 2px;display: none;">
                                <p class="text-danger">Grafo não atualizado, com os filtros selecionados</p>
                            </div>
                        }
                    </div>
                </div>
                @if (type != "meanWork")
                {
                    <div class="row">
                        <div class="col">
                            <div class="card text-xs-center" style="height: 237.9px; max-height: 237.9px">
                                <div class="card-body" style="overflow-y:auto">
                                    <h5 class="card-title">Informação</h5>
                                    <dl class="row">
                                        @if (type == "mean")
                                        {
                                            <dt class="col-sm-6">Desempenho médio: </dt>
                                            <dd class="col-sm-6">@String.Format("{0:N0}", meanMinutesAll) minutos</dd>
                                        }
                                        else if (type == "effort" || type == "effortWorkstation")
                                        {
                                            <dt class="col-sm-6">Tempo Total: </dt>
                                            <dd class="col-sm-6">@String.Format("{0:N0}", totalEffort) minutos</dd>
                                        }
                                        else
                                        {
                                            <dt class="col-sm-6">Tempo Operacional: </dt>
                                            <dd class="col-sm-6">@String.Format("{0:N0}", totalEffort) minutos</dd>
                                        }
                                        <dt class="col-sm-6">Atividade Escolhida: </dt>
                                        <dd class="col-sm-6">@activityChosen</dd>
                                    </dl>
                                </div>
                            </div> <!-- end card-box-->
                        </div> <!-- end col -->
                        <div class="col">
                            <div class="card text-xs-center" style="height: 237.9px; max-height: 237.9px">
                                <div class="card-body">
                                    <h5 class="card-title">Peças</h5>
                                    <div style="max-height: 120px;overflow-y:auto">
                                        @if (parts == null)
                                        {
                                            <h5>Nenhuma peça.</h5>
                                        }
                                        else
                                        {
                                            foreach (var p in parts)
                                            {
                                                <h5>@p</h5>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <div class="card text-xs-center" style="height: 237.9px; max-height: 237.9px">
                                <div class="card-body">
                                    <h5 class="card-title">Moldes</h5>
                                    <div style="max-height: 120px;overflow-y:auto">
                                        @if (moulds == null)
                                        {
                                            <h5>Nenhum molde.</h5>
                                        }
                                        else
                                        {
                                            foreach (var m in moulds)
                                            {
                                                <h5>@m</h5>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        }
    </div>
</div>
<div id="error" class="alert alert-danger" data-alert="alert" style="display:none;">
    Não existem dados nas datas inseridas
</div>



@if ((type == "mean" || type == "effort" || type == "effortWorkstation" || type == "effortWork" || type == "meanWork")
&& (meanMinutesAll != null || totalEffort != null || hasValues == "true"))
{
    <div class="row">
        @if (type == "meanWork")
        {
            <div class="col">
                @if (Model != null)
                {
                    <div class="table-responsive">
                        <table id="scroll-horizontal-datatable" class="table table-dark dt-responsive nowrap w-100">
                            <thead>
                                <tr>
                                    <th>Frequência</th>
                                    <th>Média</th>
                                    <th>Mediana</th>
                                    <th>Duração Mínima</th>
                                    <th>Duração Máxima</th>
                                    <th>Workstation</th>
                            </thead>
                            <tbody>

                                @foreach (Pmviz_Frontend.Models.WorkstationFreq a in Model)
                                {
                                    <tr>
                                        <td>@a.Frequency</td>
                                        <td>@a.MeanActivityFormatted</td>
                                        <td>@a.MedianActivityFormatted</td>
                                        <td>@a.MinActivityFormatted</td>
                                        <td>@a.MaxActivityFormatted</td>
                                        <td>@a.Workstation</td>
                                    </tr>

                                }

                            </tbody>
                        </table>
                    </div>

                }
            </div>
        }
    </div>
}



<script>
    var select = document.getElementById("acts");
    var selectWork = document.getElementById("stations")
    var selectList = document.getElementById("actv");
    var selectListWorkstations = document.getElementById("works");
    var userTypeDiv = document.getElementById("option");
    var workstationTypeDiv = document.getElementById("option2");
    var btnSubmit = document.getElementById("send");
    var radioPerformanceUser = document.getElementById("typeWorkstation");
    var radioPerformanceWork = document.getElementById("radioPerformanceWork");
    var userCheck = document.getElementById("userCheck");
    var workCheck = document.getElementById("workCheck");
    var divLoader = document.getElementById("loader");
    var divGraph = document.getElementById("divGraph");
    var typeResource = "@typeResource" + "s";
    var type = "@type";
    var startDate = ''; var endDate = '';

    if (type == "mean") {
        type = "performance";
    } else if (type == "effort") {
        type = "workhours/activities";
    } else if (type == "effortWorkstation"){
        type = "workhours/workstations";
    } else if (type == "effortWork"){
        type = "workstations/operationalhours";
    }

    $('#inputStartFilter, #inputEndFilter').change(function () {
        if (startDate != $('#inputStartFilter').val() || endDate != $('#inputEndFilter').val()) {
            $("#infoGraph").css("display", "block");
            $("#filterGraph").prop("disabled", false);
        } else {
            $("#infoGraph").css("display", "none");
            $("#filterGraph").prop("disabled", true);
        }
    });

    $("#filterGraph").click(function () {
        if (new Date($('#inputStartFilter').val()) > new Date($('#inputEndFilter').val())) {
            $("#error").html("As datas no filtro não estão inseridas corretamente");
            $("#error").fadeIn();
            closeAlertBox();
            return;
        }
        loading(divGraph, divLoader);
        $.ajax({
            type: "POST",
            data: {
                process: @processId,
                startDate: convertDate($('#inputStartFilter').val()),
                endDate: convertDate($('#inputEndFilter').val()),
                type: "resources",
                categoryType: typeResource,
                categoryResource: type,
                activity: $("#actv").val(),
                workstation: $("#works").val()
            },
            url: "/Log/GetFilter",
            dataType: 'json',
            success: function (response) {
                if (response.success) {
                    loading(divLoader, divGraph);
                    if (!response.request) {
                        $("#error").html("Não existem dados nas datas inseridas");
                        $("#error").fadeIn();
                        closeAlertBox();
                        return;
                    }
                    var chart = $("#chart").data("kendoChart");
                    var data = changeArrayToChart(JSON.parse(response.request));

                    startDate = $('#inputStartFilter').val();
                    endDate = $('#inputEndFilter').val();
                    $("#infoGraph").css("display", "none");
                    $("#filterGraph").prop("disabled", true);

                    var dataSource = new kendo.data.DataSource({
                        data: data
                    });
                    if (chart != null) {
                        chart.setDataSource(dataSource);
                    }
                } else {
                    loading(divLoader, divGraph);
                    $("#error").fadeIn();
                    closeAlertBox();
                }
            },
            error: function (response) {
                loading(divLoader, divGraph);
                alert("Erro a realizar o pedido");
            }
        });
    });

    function closeAlertBox() {
        window.setTimeout(function () {
            $("#error").fadeOut(300)
        }, 3000);
    }

    if (userCheck != null) {
        userTypeDiv.style.display = "block"
        workstationTypeDiv.style.display = "none"
    }

    if (workCheck != null) {
        userTypeDiv.style.display = "none"
        workstationTypeDiv.style.display = "block"
    }
    if (type == "meanWork") {
        $(document).ready(function () {
            var frequencyChart = document.getElementById("frequencyChart");
            var medianChart = document.getElementById("medianChart");
            var meanChart = document.getElementById("meanChart");
            var frequencyButton = document.getElementById("frequencyButton");
            var medianButton = document.getElementById("medianButton");
            var meanButton = document.getElementById("meanButton");

            medianChart.style.display = "none";
            meanChart.style.display = "none";
            frequencyButton.disabled = true;

            $("#frequencyButton").click(function () {
                frequencyButton.disabled = true;
                medianButton.disabled = false;
                meanButton.disabled = false;
                frequencyChart.style.display = "block";
                medianChart.style.display = "none";
                meanChart.style.display = "none";
            });

            $("#medianButton").click(function () {
                frequencyButton.disabled = false;
                medianButton.disabled = true;
                meanButton.disabled = false;
                frequencyChart.style.display = "none";
                medianChart.style.display = "block";
                meanChart.style.display = "none";
            });

            $("#meanButton").click(function () {
                frequencyButton.disabled = false;
                medianButton.disabled = false;
                meanButton.disabled = true;
                frequencyChart.style.display = "none";
                medianChart.style.display = "none";
                meanChart.style.display = "block";
            });
        });
    }

    if (selectList.value == "") {
        select.style.display = "none";

    }

    if (selectListWorkstations.value == "") {
        selectWork.style.display = "none";

    }

    function handleAct(selectBox) {
        btnSubmit.click()
    }

    function handleWork(selectBox) {
        btnSubmit.click()
    }


    function handleMiner(radio) {
        if (radio.value == "mean" || radio.value == "effort") {
            selectWork.style.display = "none";
            select.style.display = "block";
        } else if (radio.value == "effortWorkstation") {
            select.style.display = "none";
            selectWork.style.display = "block";
        }

        if (selectList.value == "") {

        }
        else if (selectList.value != "" && (radio.value == "mean" || radio.value == "effort" || radio.value == "effortWork" || radio.value == "meanWork")) {
            btnSubmit.click()

        }

        if (selectListWorkstations.value == "") {

        }
        else if (selectListWorkstations.value != "" && radio.value == "effortWorkstation") {
            btnSubmit.click()

        }
    }

    function handleRadio(radio) {
        if (radio.value == "user") {
            radioPerformanceUser.checked = true
            userTypeDiv.style.display = "block"
            workstationTypeDiv.style.display = "none"
            select.style.display = "block";
            if (selectListWorkstations == "") {

            }
            else if (selectListWorkstations.value != "") {
                btnSubmit.click()
            }

        } else if (radio.value == "workstation") {
            radioPerformanceWork.checked = true
            userTypeDiv.style.display = "none"
            workstationTypeDiv.style.display = "block"
            selectWork.style.display = "none";
            select.style.display = "block";
        }

        if (selectList.value == "") {

        }
        else if (selectList.value != "") {
            btnSubmit.click()
        }


    }

    function clearCalendar(x) {
        $('#' + x).val('');
        if (startDate != $('#inputStartFilter').val() || endDate != $('#inputEndFilter').val()) {
            $("#infoGraph").css("display", "block");
            $("#filterGraph").prop("disabled", false);
        } else {
            $("#infoGraph").css("display", "none");
            $("#filterGraph").prop("disabled", true);
        }
    }
    function convertDate(field) {
        if (field) {
            let current_datetime = new Date(field);
            return current_datetime.getFullYear() + "-" + (current_datetime.getMonth() + 1) + "-" + current_datetime.getDate();
        }
        return null;
    }

    function changeArrayToChart(s) {
        if (type == "performance") {
            for (i = 0; i < s.Resources.length; i++) {
                s.Resources[i].MeanMillis = millisToMinutesAndSeconds(s.Resources[i].MeanMillis);
            }
            if (s.Resources.length) {
                s.Resources.sort(function (a, b) {
                    return b.MeanMillis - a.MeanMillis;
                });
            }
            return s.Resources;
        }
        if (type == "workhours/activities" || type == "workhours/workstations") {
            for (i = 0; i < s.Users.length; i++) {
                s.Users[i].WorkHoursMillis = millisToMinutesAndSeconds(s.Users[i].WorkHoursMillis);
            }
            if (s.Users.length) {
                s.Users.sort(function (a, b) {
                    return b.WorkHoursMillis - a.WorkHoursMillis;
                });
            }
            return s.Users;
        }
        if (type == "workstations/operationalhours") {
            for (i = 0; i < s.Workstation.length; i++) {
                s.Workstation[i].OperationalHoursMillis = millisToMinutesAndSeconds(s.Workstation[i].OperationalHoursMillis);
            }
            if (s.Workstation.length) {
                s.Workstation.sort(function (a, b) {
                    return b.OperationalHoursMillis - a.OperationalHoursMillis;
                });
            }
            return s.Workstation;
        }


    }

    function millisToMinutesAndSeconds(millis) {
        var minutes = Math.floor(millis / 60000);
        var seconds = ((millis % 60000) / 1000).toFixed(0);
        return minutes + seconds / 100;
    }

    function loading(x, y) {
        if (x.style.display != "none" || y.style.display != "block") {
            x.style.display = "none";
            y.style.display = "block";
        }
    }


</script>



